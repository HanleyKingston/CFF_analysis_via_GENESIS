# 5/24/20
## Generated pruned SNP list
Rscript ld_pruning.R CFF_sid_onlyGT.gds --sample_id keep_samples.rds --variant_id keep_var_stringent.rds --window_size 1

## pruned SNP list from William:
CFF_5134_onlyGT_pruned.rds
(inputs are here: https://github.com/wwgordon/cff_gwas/blob/master/ld_prune_gds.R)

# 6/4/20
## Troubleshooting PC and grm outputs - this will generate:
1. a King object
2. 1st iteration PC-Air object
3. 1st iteration PC-Relate object
4. 2nd iteration PC-Air object
5. 2nd iteration PC-Relate object
6. A kinship matrix
### Try higher relatedness threshold:
Rscript pc_grm_troubleshoot.R CFF_sid_onlyGT.gds --out_prefix high_first_kin_thresh --variant_id pruned_snps.rds --sample_id keep_samples.rds --kin_thresh1 3.5 --div_thresh1 4.5 --kin_thresh 4.5 --div_thresh 4.5 --keep_king & > high_first_kin_thresh_pc_grm_troubleshoot.out

### Pass pruned SNP object from william to generate PCs and GRM:
Rscript pc_grm_troubleshoot.R CFF_sid_onlyGT.gds --out_prefix pruned_from_William --variant_id CFF_5134_onlyGT_pruned.rds --sample_id keep_samples.rds --kin_thresh1 3.5 --div_thresh1 4.5 --kin_thresh 4.5 --div_thresh 4.5 --keep_king & > pruned_from_William_pc_grm_troubleshoot.out


## Add a shared or not shared race/ethnicity descriptor to a kinship object from King


## plots - based on the 6 outputs from above
library(ggplot2)
### Relatedness plots from king
pcrel <- readRDS(file = "high_first_kin_threshking_obj.rds")
kinship <- pcrel$kinBtwn
png("high_first_kin_thresh_king_plot.png")
ggplot(kinship, aes(IBS0, kin)) +
    geom_hline(yintercept=2^(-seq(3,9,2)/2), linetype="dashed", color = "grey") +
    geom_point(alpha=0.2) +
    ylab("kinship estimate") +
    ggtitle("kinship")
dev.off()

pcrel <- readRDS(file = "pruned_from_Williamking_1it.rds")
kinship <- pcrel$kinBtwn
png("pruned_from_William_king_plot.png")
ggplot(kinship, aes(IBS0, kin)) +
    geom_hline(yintercept=2^(-seq(3,9,2)/2), linetype="dashed", color = "grey") +
    geom_point(alpha=0.2) +
    ylab("kinship estimate") +
    ggtitle("kinship")
dev.off()

### PC visualizations from first iteration PC-Air (kin_thresh = 2^(-7/2), div_thresh = 2^(-9/2))
Rscript pca_plots.R high_first_kin_threshpcair_1it.rds --out_prefix high_first_kin_threshpcair_1it --phenotype_file annot.rds --group race_or_ethnicity

Rscript pca_plots.R pruned_from_Williampcair_1it.rds --out_prefix pruned_from_Williampcair_1it --phenotype_file annot.rds --group race_or_ethnicity

### Relatedness plots from first iteration PC-Relate
pcrel <- readRDS(file = "high_first_kin_threshpcr_obj_1it.rds")
kinship <- pcrel$kinBtwn
png("high_first_kin_thresh_kinship_1it.png")
ggplot(kinship, aes(k0, kin)) +
    geom_hline(yintercept=2^(-seq(3,9,2)/2), linetype="dashed", color = "grey") +
    geom_point(alpha=0.2) +
    ylab("kinship estimate") +
    ggtitle("kinship")
dev.off()

pcrel <- readRDS(file = "pruned_from_Williampcr_obj_1it.rds")
kinship <- pcrel$kinBtwn
png("pruned_from_William_kinship_1it.png")
ggplot(kinship, aes(k0, kin)) +
    geom_hline(yintercept=2^(-seq(3,9,2)/2), linetype="dashed", color = "grey") +
    geom_point(alpha=0.2) +
    ylab("kinship estimate") +
    ggtitle("kinship")
dev.off()


### PC visualizations from first iteration PC-Air (kin_thresh = 2^(-7/2), div_thresh = 2^(-9/2))
Rscript pca_plots.R high_first_kin_threshpcair.rds --out_prefix high_first_kin_threshpcair --phenotype_file annot.rds --group race_or_ethnicity

Rscript pca_plots.R pruned_from_Williampcair.rds --out_prefix pruned_from_Williampcair --phenotype_file annot.rds --group race_or_ethnicity


### Relatedness plots from 2nd iteration PC-Relate
pcrel <- readRDS(file = "high_first_kin_threshpcr_obj.rds")
kinship <- pcrel$kinBtwn
png("high_first_kin_thresh_kinship.png")
ggplot(kinship, aes(k0, kin)) +
    geom_hline(yintercept=2^(-seq(3,9,2)/2), linetype="dashed", color = "grey") +
    geom_point(alpha=0.2) +
    ylab("kinship estimate") +
    ggtitle("kinship")
dev.off()

pcrel <- readRDS(file = "pruned_from_Williampcr_obj.rds")
kinship <- pcrel$kinBtwn
png("pruned_from_William_kinship.png")
ggplot(kinship, aes(k0, kin)) +
    geom_hline(yintercept=2^(-seq(3,9,2)/2), linetype="dashed", color = "grey") +
    geom_point(alpha=0.2) +
    ylab("kinship estimate") +
    ggtitle("kinship")
dev.off()


## Check effect of different kin_thresh and div_thresh values on numbers in related and unrelated set - from King object
library(SeqArray)
library(GENESIS)
library(SeqVarTools)
library(SNPRelate)

## Based on my pruned SNP list:
king <- readRDS("high_first_kin_threshking_obj.rds")
kingMat <- king$kinship
colnames(kingMat) <- rownames(kingMat) <- king$sample.id
gds <- seqOpen("CFF_sid_onlyGT.gds")

### kin.thresh = 2^(-7/2), div.thresh = -2^(-9/2) *This is what I used
pc_part1 <- pcairPartition(gds, kinobj = kingMat, kin.thresh = 2^(-7/2), div.thresh = -2^(-9/2), divobj = kingMat)
str(pc_part1)
#List of 2
# $ rels  : chr [1:4655] "S76851" "S13552" "S52656" "S54591" ...
# $ unrels: chr [1:316] "S97442" "S78938" "S77510" "S22822" ...

### kin.thresh = 2^(-7/2), div.thresh = -2^(-7/2)
pc_part2 <- pcairPartition(gds, kinobj = kingMat, kin.thresh = 2^(-7/2), div.thresh = -2^(-7/2), divobj = kingMat)
str(pc_part2)
List of 2
# $ rels  : chr [1:4655] "S76851" "S13552" "S52656" "S54591" ...
# $ unrels: chr [1:316] "S97442" "S78938" "S77510" "S22822" ...
#div.thresh does not seem to have an impact on the number of sample in related and unrelated set

### kin.thresh = 2^(-5/2), div.thresh = -2^(-9/2)
pc_part3 <- pcairPartition(gds, kinobj = kingMat, kin.thresh = 2^(-5/2), div.thresh = -2^(-9/2), divobj = kingMat)
str(pc_part3)
#List of 2
# $ rels  : chr [1:945] "S71706" "S13731" "S38266" "S11026" ...
# $ unrels: chr [1:4026] "S66366" "S48371" "S30713" "S43109" ...

### kin.thresh = 2^(-6/2), div.thresh = -2^(-9/2)
pc_part4 <- pcairPartition(gds, kinobj = kingMat, kin.thresh = 2^(-6/2), div.thresh = -2^(-9/2), divobj = kingMat)
str(pc_part4)
#List of 2
# $ rels  : chr [1:964] "S71706" "S35496" "S13731" "S25290" ...
# $ unrels: chr [1:4007] "S66366" "S48371" "S30713" "S43109" ...
#this is the threshold that captures everyone in the large cluster and excludes the 2 small top clusters

### kin.thresh = 2^(-6.5/2), div.thresh = -2^(-9/2)
pc_part5 <- pcairPartition(gds, kinobj = kingMat, kin.thresh = 2^(-6.5/2), div.thresh = -2^(-9/2), divobj = kingMat)
str(pc_part5)
#List of 2
# $ rels  : chr [1:1778] "S53263" "S25472" "S32485" "S33582" ...
# $ unrels: chr [1:3193] "S66366" "S30713" "S56629" "S96954" ...


## Based on William's pruned SNP list:
king <- readRDS("pruned_from_Williamking_obj.rds")
kingMat <- king$kinship
colnames(kingMat) <- rownames(kingMat) <- king$sample.id

### kin.thresh = 2^(-7/2), div.thresh = -2^(-9/2) *This is what I used
pc_part1 <- pcairPartition(gds, kinobj = kingMat, kin.thresh = 2^(-7/2), div.thresh = -2^(-9/2), divobj = kingMat)
str(pc_part1)
#List of 2
# $ rels  : chr [1:2254] "S53263" "S25472" "S97980" "S33582" ...
# $ unrels: chr [1:2717] "S30713" "S96954" "S38975" "S12067" ...
#Although the 2 kinship plots based on the different LD pruned objects look similar,
#there are more samples with lower kinship values in the kinship object from William's LD-pruned SNPs!


### kin.thresh = 2^(-5/2), div.thresh = -2^(-9/2)
pc_part3 <- pcairPartition(gds, kinobj = kingMat, kin.thresh = 2^(-5/2), div.thresh = -2^(-9/2), divobj = kingMat)
str(pc_part3)
List of 2
 $ rels  : chr [1:942] "S71706" "S13731" "S38266" "S87729" ...
 $ unrels: chr [1:4029] "S66366" "S48371" "S30713" "S43109" ...



## Check effect of different kin_thresh and div_thresh values on numbers in related and unrelated set from 1st iteration PC-Relate
library(GENESIS)
library(SeqVarTools)
library(SNPRelate)

## Based on my pruned SNP list:
king <- readRDS("6,4_troubleshoot/high_first_kin_threshking_obj.rds")
kingMat <- king$kinship
colnames(kingMat) <- rownames(kingMat) <- king$sample.id
pcrel <- readRDS("6,4_troubleshoot/high_first_kin_threshpcr_obj_1it.rds")
pcrelate_matrix <- pcrelateToMatrix(pcrel, scaleKin=1)
gds <- seqOpen("CFF_sid_onlyGT.gds")

### kin.thresh = 2^(-9/2), div.thresh = -2^(-9/2) *This is what I used
pc_part1 <- pcairPartition(gds, kinobj = pcrelate_matrix, kin.thresh = 2^(-9/2), div.thresh = -2^(-9/2), divobj = kingMat)
#Warning message:
#In pcairPartition(gds, kinobj = pcrelate_matrix, kin.thresh = 2^(-9/2),  :
#  some samples in unrel.set are not in kinobj or divobj; they will not be included *I looked more itno this below
str(pc_part1)
#List of 2
# $ rels  : chr [1:961] "S71706" "S13731" "S25290" "S35496" ...
# $ unrels: chr [1:4010] "S10003" "S10014" "S10074" "S10130" ...

### kin.thresh = 2^(-11/2), div.thresh = -2^(-9/2)
pc_part2 <- pcairPartition(gds, kinobj = pcrelate_matrix, kin.thresh = 2^(-11/2), div.thresh = -2^(-9/2), divobj = kingMat)
#Warning message:
#In pcairPartition(gds, kinobj = pcrelate_matrix, kin.thresh = 2^(-11/2),  :
#  some samples in unrel.set are not in kinobj or divobj; they will not be included
str(pc_part2)
#List of 2
# $ rels  : chr [1:976] "S79149" "S97265" "S40340" "S99186" ...
# $ unrels: chr [1:3995] "S10003" "S10014" "S10074" "S10130" ...

### kin.thresh = 2^(-9/2), div.thresh = -2^(-11/2)
pc_part3 <- pcairPartition(gds, kinobj = pcrelate_matrix, kin.thresh = 2^(-9/2), div.thresh = -2^(-11/2), divobj = kingMat)
#Warning message:
#In pcairPartition(gds, kinobj = pcrelate_matrix, kin.thresh = 2^(-9/2),  :
#  some samples in unrel.set are not in kinobj or divobj; they will not be included
str(pc_part3)
#List of 2
# $ rels  : chr [1:961] "S71706" "S48216" "S38266" "S25290" ...
# $ unrels: chr [1:4010] "S10003" "S10014" "S10074" "S10130" ...
#div.thresh doesn't make a difference


## Based on pruned SNP list from William:
king <- readRDS("pruned_from_Williamking_obj.rds")
kingMat <- king$kinship
colnames(kingMat) <- rownames(kingMat) <- king$sample.id
pcrel <- readRDS("pruned_from_Williampcr_obj_1it.rds")
pcrelate_matrix <- pcrelateToMatrix(pcrel, scaleKin=1)


### kin.thresh = 2^(-9/2), div.thresh = -2^(-9/2) *This is what I used
pc_part1 <- pcairPartition(gds, kinobj = pcrelate_matrix, kin.thresh = 2^(-9/2), div.thresh = -2^(-9/2), divobj = kingMat)
#Warning message:
#In pcairPartition(gds, kinobj = pcrelate_matrix, kin.thresh = 2^(-9/2),  :
#  some samples in unrel.set are not in kinobj or divobj; they will not be included
str(pc_part1)
#List of 2
# $ rels  : chr [1:956] "S71706" "S11026" "S25290" "S38266" ...
# $ unrels: chr [1:4015] "S10003" "S10014" "S10074" "S10130" ...
#Number of people in unrelated set are very similar between mine and William's

### kin.thresh = 2^(-11/2), div.thresh = -2^(-9/2)
pc_part2 <- pcairPartition(gds, kinobj = pcrelate_matrix, kin.thresh = 2^(-11/2), div.thresh = -2^(-9/2), divobj = kingMat)
#Warning message:
#In pcairPartition(gds, kinobj = pcrelate_matrix, kin.thresh = 2^(-11/2),  :
#  some samples in unrel.set are not in kinobj or divobj; they will not be included
str(pc_part2)
#List of 2
# $ rels  : chr [1:974] "S40340" "S71706" "S89660" "S19246" ...
# $ unrels: chr [1:3997] "S10003" "S10014" "S10074" "S10130" ...



## Investigating warning:
#kin.thresh = 2^(-9/2), div.thresh = -2^(-9/2) *This is what I used
pc_part1 <- pcairPartition(gds, kinobj = pcrelate_matrix, kin.thresh = 2^(-9/2), div.thresh = -2^(-9/2), divobj = kingMat)
#Warning message:
#In pcairPartition(gds, kinobj = pcrelate_matrix, kin.thresh = 2^(-9/2),  :
#  some samples in unrel.set are not in kinobj or divobj; they will not be included
str(pcrelate_matrix)
#Formal class 'dsyMatrix' [package "Matrix"] with 5 slots
#  ..@ x       : num [1:24710841] 0.451885 0.000653 0.005276 0.002987 0.000796 ...
#  ..@ Dim     : int [1:2] 4971 4971
#  ..@ Dimnames:List of 2
#  .. ..$ : chr [1:4971] "S10003" "S10014" "S10017" "S10063" ...
#  .. ..$ : chr [1:4971] "S10003" "S10014" "S10017" "S10063" ...
#  ..@ uplo    : chr "U"
#  ..@ factors : list()
str(kingMat)
# num [1:4971, 1:4971] 0.5 0.0971 0.0957 0.0948 0.0926 ...
# - attr(*, "dimnames")=List of 2
#  ..$ : chr [1:4971] "S66366" "S48371" "S92611" "S30713" ...
#  ..$ : chr [1:4971] "S66366" "S48371" "S92611" "S30713" ...


# 6/5/20
## Re-run pc_grm_troubleshoot.R with the slightly lower kin_thresh (2^(-6/2)) on my SNP data
#This threshold was suggested by Stephanie to capture more individuals in the initial unrelated set
#Note, the pruned SNP list from William does 
#I am re-running the script entirely to be consistant, but this does use the same king object as the previous run
Rscript pc_grm_troubleshoot.R CFF_sid_onlyGT.gds --out_prefix kin_thresh3.0 --variant_id pruned_snps.rds --sample_id keep_samples.rds --kin_thresh1 3.0 --div_thresh1 4.5 --kin_thresh 4.5 --div_thresh 4.5 --keep_king & > kin_thresh3.0_pc_grm_troubleshoot.out


## plots
### PC visualizations from first iteration PC-Air (kin_thresh = 2^(-6/2), div_thresh = 2^(-9/2))
Rscript pca_plots.R kin_thresh3.0pcair_1it.rds --out_prefix kin_thresh3.0pcair_1it --phenotype_file annot.rds --group race_or_ethnicity

### Relatedness plots from first iteration PC-Relate
library(ggplot2)

pcrel <- readRDS(file = "kin_thresh3.0pcr_obj_1it.rds")
kinship <- pcrel$kinBtwn
png("kin_thresh3.0_kinship_1it.png")
ggplot(kinship, aes(k0, kin)) +
    geom_hline(yintercept=2^(-seq(3,9,2)/2), linetype="dashed", color = "grey") +
    geom_point(alpha=0.2) +
    ylab("kinship estimate") +
    ggtitle("kinship")
dev.off()

### PC visualizations from first iteration PC-Air (kin_thresh = 2^(-9/2), div_thresh = 2^(-9/2))
Rscript pca_plots.R kin_thresh3.0pcair.rds --out_prefix kin_thresh3.0pcair --phenotype_file annot.rds --group race_or_ethnicity

### Relatedness plots from 2nd iteration PC-Relate
pcrel <- readRDS(file = "kin_thresh3.0pcr_obj.rds")
kinship <- pcrel$kinBtwn
png("kin_thresh3.0_kinship.png")
ggplot(kinship, aes(k0, kin)) +
    geom_hline(yintercept=2^(-seq(3,9,2)/2), linetype="dashed", color = "grey") +
    geom_point(alpha=0.2) +
    ylab("kinship estimate") +
    ggtitle("kinship")
dev.off()


# 6/5 - 6/8

# Redoing with a higher r^2 for LD pruning. I also edited the pcrelate argument "pcs" to include all eigenvectors, not just the first 3

# LD pruning
library(SeqArray)
library(SNPRelate)
library(argparser)
sessionInfo()
                          
sessionInfo()
#R version 3.6.1 (2019-07-05)
#Platform: x86_64-conda_cos6-linux-gnu (64-bit)
#Running under: CentOS release 6.10 (Final)
#
#Matrix products: default
#BLAS/LAPACK: /cm/shared/apps/conda3/5.3.1/lib/R/lib/libRblas.so
#
#locale:
# [1] LC_CTYPE=en_US.UTF-8       LC_NUMERIC=C
# [3] LC_TIME=en_US.UTF-8        LC_COLLATE=en_US.UTF-8
# [5] LC_MONETARY=en_US.UTF-8    LC_MESSAGES=en_US.UTF-8
# [7] LC_PAPER=en_US.UTF-8       LC_NAME=C
# [9] LC_ADDRESS=C               LC_TELEPHONE=C
#[11] LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C
#
#attached base packages:
#[1] stats     graphics  grDevices utils     datasets  methods   base
#
#other attached packages:
#[1] argparser_0.6    SNPRelate_1.20.1 SeqArray_1.26.2  gdsfmt_1.22.0
#
#loaded via a namespace (and not attached):
# [1] IRanges_2.20.2         Biostrings_2.54.0      bitops_1.0-6
# [4] GenomeInfoDb_1.22.1    stats4_3.6.1           zlibbioc_1.32.0
# [7] XVector_0.26.0         S4Vectors_0.24.4       RCurl_1.98-1.2
#[10] parallel_3.6.1         compiler_3.6.1         BiocGenerics_0.32.0
#[13] GenomicRanges_1.38.0   GenomeInfoDbData_1.2.2

## parse file paths
gds.file <- "CFF_sid_onlyGT.gds"
out.file <- "pruned_higherLD"
sample.id <- readRDS("keep_samples.rds")
variant.id <- readRDS("keep_var_stringent.rds")

## open GDS file
gds <- seqOpen(gds.file)

maf <- 0.05
missing <- 0.05
window_size <- 1e6
r_threshold <- sqrt(0.2)
r_threshold
#[1] 0.4472136


snpset <- snpgdsLDpruning(gds,
                          sample.id = sample.id,
                          snp.id = variant.id,
                          maf = maf,
                          missing.rate = missing,
                          method = "corr",
                          slide.max.bp = window_size, 
                          ld.threshold = r_threshold
                          )

#SNV pruning based on LD:
#Calculating allele counts/frequencies ...
#[==================================================] 100%, completed, 10.8m
#Excluding 447,987 SNVs (monomorphic: TRUE, MAF: 0.05, missing rate: 0.05)
#Working space: 4,971 samples, 6,381,209 SNVs
#    using 1 (CPU) core
#    sliding window: 1,000,000 basepairs, Inf SNPs
#    |LD| threshold: 0.447214
#    method: correlation
#Chromosome 1: 0.21%, 20,844/9,936,669
#Chromosome 10: 0.53%, 30,109/5,678,525
#Chromosome 11: 0.44%, 25,409/5,822,215
#Chromosome 12: 0.47%, 26,164/5,561,704
#Chromosome 13: 0.54%, 23,674/4,404,461
#Chromosome 14: 0.54%, 19,329/3,567,216
#Chromosome 15: 0.55%, 18,662/3,417,178
#Chromosome 16: 0.64%, 24,581/3,826,829
#Chromosome 17: 0.67%, 22,529/3,380,458
#Chromosome 18: 0.53%, 17,957/3,417,044
#Chromosome 19: 0.68%, 17,903/2,617,465
#Chromosome 2: 0.47%, 46,475/9,877,586
#Chromosome 20: 0.87%, 24,742/2,842,811
#Chromosome 21: 0.56%, 9,631/1,722,032
#Chromosome 22: 1.11%, 20,069/1,809,412
#Chromosome 3: 0.44%, 35,127/8,005,377
#Chromosome 4: 0.45%, 35,251/7,759,638
#Chromosome 5: 0.44%, 31,481/7,235,943
#Chromosome 6: 0.43%, 28,708/6,751,274
#Chromosome 7: 0.52%, 32,989/6,373,532
#Chromosome 8: 0.42%, 25,812/6,159,400
#Chromosome 9: 0.53%, 28,432/5,371,174
#565,878 markers are selected in total.

## convert list with one element per chrom to vector
pruned <- unlist(snpset, use.names=FALSE)
str(pruned)
#int [1:565878] 1683 2190 2215 3755 6388 10751 10852 11502 13043 13048 ...

saveRDS(pruned, file=out.file)


# GRM and PC generation
#Started a new R session

library(SeqArray)
library(GENESIS)
library(SeqVarTools)
library(SNPRelate)
library(ggplot2)

sessionInfo()
#R version 3.6.1 (2019-07-05)
#Platform: x86_64-conda_cos6-linux-gnu (64-bit)
#Running under: CentOS release 6.10 (Final)
#
#Matrix products: default
#BLAS/LAPACK: /cm/shared/apps/conda3/5.3.1/lib/R/lib/libRblas.so
#
#locale:
# [1] LC_CTYPE=en_US.UTF-8       LC_NUMERIC=C
# [3] LC_TIME=en_US.UTF-8        LC_COLLATE=en_US.UTF-8
# [5] LC_MONETARY=en_US.UTF-8    LC_MESSAGES=en_US.UTF-8
# [7] LC_PAPER=en_US.UTF-8       LC_NAME=C
# [9] LC_ADDRESS=C               LC_TELEPHONE=C
#[11] LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C
#
#attached base packages:
#[1] stats     graphics  grDevices utils     datasets  methods   base
#
#other attached packages:
#[1] SNPRelate_1.20.1   SeqVarTools_1.24.1 GENESIS_2.16.1     SeqArray_1.26.2
#[5] gdsfmt_1.22.0
#
#loaded via a namespace (and not attached):
# [1] zoo_1.8-8              tidyselect_1.1.0       purrr_0.3.4
# [4] DNAcopy_1.60.0         splines_3.6.1          lattice_0.20-40
# [7] vctrs_0.3.0            generics_0.0.2         GWASExactHW_1.01
#[10] stats4_3.6.1           mgcv_1.8-31            blob_1.2.1
#[13] survival_3.1-8         rlang_0.4.6            pillar_1.4.4
#[16] glue_1.4.1             DBI_1.1.0              BiocGenerics_0.32.0
#[19] bit64_0.9-7            GenomeInfoDbData_1.2.2 foreach_1.5.0
#[22] lifecycle_0.2.0        zlibbioc_1.32.0        MatrixModels_0.4-1
#[25] Biostrings_2.54.0      codetools_0.2-16       memoise_1.1.0
#[28] Biobase_2.46.0         SparseM_1.78           IRanges_2.20.2
#[31] lmtest_0.9-37          GenomeInfoDb_1.22.1    quantreg_5.55
#[34] parallel_3.6.1         broom_0.5.6            GWASTools_1.32.0
#[37] Rcpp_1.0.4.6           backports_1.1.7        quantsmooth_1.52.0
#[40] S4Vectors_0.24.4       XVector_0.26.0         bit_1.1-15.2
#[43] digest_0.6.25          dplyr_1.0.0            GenomicRanges_1.38.0
#[46] grid_3.6.1             bitops_1.0-6           sandwich_2.5-1
#[49] magrittr_1.5           RCurl_1.98-1.2         RSQLite_2.2.0
#[52] tibble_3.0.1           mice_3.9.0             crayon_1.3.4
#[55] tidyr_1.1.0            pkgconfig_2.0.3        ellipsis_0.3.1
#[58] Matrix_1.2-18          data.table_1.12.8      logistf_1.23
#[61] iterators_1.0.12       R6_2.4.1               nlme_3.1-144
#[64] compiler_3.6.1

variant_id <- readRDS("pruned_higherLD")
head(variant_id)
#[1]  1683  2190  2215  3755  6388 10751

sample_id <- readRDS("keep_samples.rds")
head(sample_id)
#[1] "S66366" "S48371" "S92611" "S30713" "S43109" "S58186"

gds <- seqOpen("CFF_sid_onlyGT.gds")

king <- snpgdsIBDKING(gds, snp.id = variant_id, sample.id = sample_id)

out_prefix <- "higherLD"
saveRDS(king, paste0(out_prefix, "king_obj.rds"))

#remove and reload king object to check everythign worked:
rm(king)
king <- readRDS("higherLDking_obj.rds")

## Generate King plot
kinship <- snpgdsIBDSelection(king)

head(kinship)
#     ID1    ID2       IBS0    kinship
#1 S66366 S48371 0.04233814 0.08446806
#2 S66366 S92611 0.04284780 0.08126938
#3 S66366 S30713 0.04332890 0.08083401
#4 S66366 S43109 0.04309900 0.07875828
#5 S66366 S58186 0.04350115 0.07912337
#6 S66366 S56629 0.04310380 0.07879784


png(paste(out_prefix, "king_plot.png", sep = ""))
ggplot(kinship, aes(IBS0, kinship)) +
    geom_hline(yintercept=2^(-seq(3,9,2)/2), linetype="dashed", color="grey") +
    geom_point(alpha=0.2) +
    ylab("kinship estimate") +
    theme_bw()
dev.off()


kingMat <- king$kinship
colnames(kingMat) <- rownames(kingMat) <-king$sample.id
head(colnames(kingMat))
#[1] "S66366" "S48371" "S92611" "S30713" "S43109" "S58186"

str(kingMat)
# num [1:4971, 1:4971] 0.5 0.0845 0.0813 0.0808 0.0788 ...
# - attr(*, "dimnames")=List of 2
#  ..$ : chr [1:4971] "S66366" "S48371" "S92611" "S30713" ...
#  ..$ : chr [1:4971] "S66366" "S48371" "S92611" "S30713" ...

kingMat[1:5,1:5]
#           S66366     S48371     S92611     S30713     S43109
#S66366 0.50000000 0.08446806 0.08126938 0.08083401 0.07875828
#S48371 0.08446806 0.50000000 0.08549786 0.08406603 0.08472768
#S92611 0.08126938 0.08549786 0.50000000 0.07896923 0.08546221
#S30713 0.08083401 0.08406603 0.07896923 0.50000000 0.07672440
#S43109 0.07875828 0.08472768 0.08546221 0.07672440 0.50000000

## How many of my kingMat values are below the kinship thereshold?
sum(kingMat)
[1] 1904571

#Individual values (note: this doesn't tell us who will and won't be included in the unrelated set because every individual has many values
sum(kingMat < 2^-6/2)/sum(kingMat)
#[1] 0.2463852 #~25%

sum(kingMat < 2^-7/2)/sum(kingMat)
#[1] 0.2099434 #~21% #When I used the lower LD pruning threshold of R^2 = 0.1, the difference between these 2 thresholds was more prounounced? - check this!

sum(kingMat < 2^-5/2)/sum(kingMat)
#[1] 0.3094808 #~31%

### Find the number of max and min kinship values (by person) below threshold
max.kin <- data.frame(max = numeric(0), ID = character(0))
i <- 1

for(ID in unique(kinship$ID1)){
  max1 <- max(kinship[kinship$ID1 == ID, "kinship"])
  max2 <- max(kinship[kinship$ID2 == ID, "kinship"])
  max.kin[i, "max"] <- ifelse(max1 > max2, max1, max2)
  i <- i + 1
  }
#Warning message:
# In max(kinship[kinship$ID2 == ID, "kinship"]) :
#  no non-missing arguments to max; returning -Inf

max.kin$ID <- unique(kinship$ID1)

max.kin <- max.kin[order(max.kin$max),]

nrow(max.kin)
#[1] 4970 #What happened to the last person?

head(max.kin)
#             max     ID
#3408 -0.06798321 S66538
#2367 -0.01961797 S95170
#3359  0.02159744 S44473
#4356  0.02242756 S77769
#1884  0.03087220 S82196
#2154  0.04456040 S78405

sum(max.kin$max <= (2^(-6/2)))
#[1] 3115

min.kin <- data.frame(min = numeric(0), ID = character(0))
i <- 1

for(ID in unique(kinship$ID1)){
  min1 <- min(kinship[kinship$ID1 == ID, "kinship"])
  min2 <- min(kinship[kinship$ID2 == ID, "kinship"])
  min.kin[i, "min"] <- ifelse(min1 < min2, min1, min2)
  i <- i + 1
  }
  
rownames(min.kin) <- unique(kinship$ID1)

min.kin <- min.kin[order(min.kin$min),]

sum(min.kin$min <= (2^(-6/2)))
#[1] 4970


## Develop 1st iteration PC-Air

### Check number in related and unrelated set using pcairPartition
pc_part1 <- pcairPartition(gds, kinobj = kingMat, kin.thresh = 2^(-6/2), div.thresh = -2^(-9/2), divobj = kingMat)
#Warning message:
#In pcairPartition(gds, kinobj = kingMat, kin.thresh = 2^(-6/2),  :
#  some samples in unrel.set are not in kinobj or divobj; they will not be included
str(pc_part1)
#List of 2
# $ rels  : chr [1:960] "S71706" "S35496" "S13731" "S25290" ...
# $ unrels: chr [1:4011] "S66366" "S48371" "S30713" "S43109" ...
#I will use this threshold

pc_part2 <- pcairPartition(gds, kinobj = kingMat, kin.thresh = 2^(-7/2), div.thresh = -2^(-9/2), divobj = kingMat)
str(pc_part2)
#List of 2
# $ rels  : chr [1:2441] "S53263" "S33582" "S52656" "S25472" ...
# $ unrels: chr [1:2530] "S30713" "S56629" "S96954" "S12067" ...
#Not enough peopple in the unrelated set

kin_thresh1 <- 2 ^ (-6/2)
div_thresh1 <- -2 ^ (-9/2)                    
mypcair <- pcair(gds, kinobj = kingMat, kin.thresh = kin_thresh1, div.thresh = div_thresh1, divobj = kingMat, snp.include = variant_id, sample.include = sample_id)
#Using kinobj and divobj to partition samples into unrelated and related sets
#Working with 4971 samples
#Identifying relatives for each sample using kinship threshold 0.125
#Identifying pairs of divergent samples using divergence threshold -0.0441941738241592
#Partitioning samples into unrelated and related sets...
#Unrelated Set: 4011 Samples
#Related Set: 960 Samples
#Performing PCA on the Unrelated Set...
#Principal Component Analysis (PCA) on genotypes:
#Calculating allele counts/frequencies ...
#[==================================================] 100%, completed, 8.8m
#Working space: 4,011 samples, 565,878 SNVs
#    using 1 (CPU) core
#CPU capabilities: Double-Precision SSE2
#Sat Jun  6 22:17:46 2020    (internal increment: 772)
#[==================================================] 100%, completed, 40.8m
#Sat Jun  6 22:58:35 2020    Begin (eigenvalues and eigenvectors)
#Sat Jun  6 22:58:51 2020    Done.
#Predicting PC Values for the Related Set...
#SNP loading:
#Working space: 4011 samples, 565878 SNPs
#    using 1 (CPU) core
#    using the top 32 eigenvectors
#Sat Jun  6 22:59:00 2020    (internal increment: 6200)
#[==================================================] 100%, completed, 9.5m
#Sat Jun  6 23:08:30 2020    Done.
#Sample loading:
#Working space: 960 samples, 565878 SNPs
#    using 1 (CPU) core
#    using the top 32 eigenvectors
#Sat Jun  6 23:08:39 2020    (internal increment: 25904)
#[==================================================] 100%, completed, 9.0m
#Sat Jun  6 23:17:38 2020    Done.


print(str(mypcair))
#List of 12
# $ vectors   : num [1:4971, 1:32] -0.004 -0.00439 -0.00108 -0.00383 -0.00104 ...
#  ..- attr(*, "dimnames")=List of 2
#  .. ..$ : chr [1:4971] "S66366" "S48371" "S92611" "S30713" ...
#  .. ..$ : NULL
# $ values    : num [1:32] 24.51 5.31 5.19 3.48 3.36 ...
# $ rels      : chr [1:960] "S71706" "S35496" "S13731" "S25290" ...
# $ unrels    : chr [1:4011] "S66366" "S48371" "S30713" "S43109" ...
# $ kin.thresh: num 0.125
# $ div.thresh: num -0.0442
# $ sample.id : chr [1:4971] "S66366" "S48371" "S92611" "S30713" ...
# $ nsamp     : int 4971
# $ nsnps     : int 565878
# $ varprop   : num [1:4011] 0.006113 0.001325 0.001295 0.000869 0.000837 ...
# $ call      : language .pcair(gdsobj = gdsobj, kinobj = ..1, divobj = ..4, kin.thresh = ..2, div.thresh = ..3,      sample.include = ..6| __truncated__
# $ method    : chr "PC-AiR"
# - attr(*, "class")= chr "pcair"
#NULL

saveRDS(mypcair, paste0(out_prefix, "pcair_1it.rds"))

#Delete PC-Air object to be sure this worked
rm(mypcair)

## plot
### Read in phenotype and subset by keep_samples
phenotype <- readRDS("phenotype.rds")
keep_samples <- readRDS(file = "keep_samples.rds")
phenotype <- phenotype[phenotype$sid %in% keep_samples,]

pca <- readRDS("higherLDpcair_1it.rds")
pcs.df <- as.data.frame(pca$vectors[,1:7])
pcs.df$sid <- rownames(pcs.df)
pcs.df <- merge(pcs.df, phenotype[,c("sid","site", "race_or_ethnicity")], by="sid", all.x = TRUE, all.y = FALSE)

rels_V <- pca$rels
pcs.df$relate <- ifelse(pcs.df$sid %in% rels_V, "related", "unrelated")

png(paste0(out_prefix, "_PC1and2_1it.png"))
ggplot() +
   geom_point(aes(pcs.df[,2], pcs.df[,3], col = factor(pcs.df$race_or_ethnicity), pch = pcs.df$relate)) +
   xlab("PC 1") + ylab("PC 2") +
   scale_shape(solid = FALSE) +
   labs(col= "Race or Ethnicity", shape="PC set")
dev.off()


png(paste0(out_prefix, "_PC2and3_1it.png"))
ggplot() +
   geom_point(aes(pcs.df[,3], pcs.df[,4], col = factor(pcs.df$race_or_ethnicity), pch = pcs.df$relate)) +
   xlab("PC 2") + ylab("PC 3") +
   scale_shape(solid = FALSE) +
   labs(col= "Race or Ethnicity", shape="PC set")
dev.off()


png(paste0(out_prefix, "_PC3and4_1it.png"))
ggplot() +
   geom_point(aes(pcs.df[,4], pcs.df[,5], col = factor(pcs.df$race_or_ethnicity), pch = pcs.df$relate)) +
   xlab("PC 3") + ylab("PC 4") +
   scale_shape(solid = FALSE) +
   labs(col= "Race or Ethnicity", shape="PC set")
dev.off()

#Plot percent variance explained by each pc:
var_prop_vect <- 100*pca$varprop[1:12]
PC_labs <- 1:12

png(paste0(out_prefix, "percent_var_1it.png"))
plot(x=PC_labs, y = var_prop_vect, xlab = "PC", ylab = "percent variance accounted for")
dev.off()


rm(pca)


## Generate 1st iteration PC-Relate
mypcair <- readRDS("higherLDpcair_1it.rds")

seqSetFilter(gds, variant.id = variant_id, sample.id = sample_id)
## of selected samples: 4,971
## of selected variants: 565,878
seqData <- SeqVarData(gds)
print("1st iteration PC-relate")
iterator <- SeqVarBlockIterator(seqData, verbose=FALSE)
mypcrel <- pcrelate(iterator, pcs = mypcair$vectors, training.set = mypcair$unrels) #Note:including all vectors, had previously just included vectors 1-3
#4971 samples to be included in the analysis...
#Betas for 32 PC(s) will be calculated using 4011 samples in training.set...
#Running PC-Relate analysis for 4971 samples using 565878 SNPs in 57 blocks...
#    Running block 1...
#    Running block 2...
#    Running block 3...
#    Running block 4...
#    Running block 5...
#    Running block 6...
#    Running block 7...
#    Running block 8...
#    Running block 9...
#    Running block 10...
#    Running block 11...
#    Running block 12...
#    Running block 13...
#    Running block 14...
#    Running block 15...
#    Running block 16...
#    Running block 17...
#    Running block 18...
#    Running block 19...
#    Running block 20...
#    Running block 21...
#    Running block 22...
#    Running block 23...
#    Running block 24...
#    Running block 25...
#    Running block 26...
#    Running block 27...
#    Running block 28...
#    Running block 29...
#    Running block 30...
#    Running block 31...
#    Running block 32...
#    Running block 33...
#    Running block 34...
#    Running block 35...
#    Running block 36...
#    Running block 37...
#    Running block 38...
#    Running block 39...
#    Running block 40...
#    Running block 41...
#    Running block 42...
#    Running block 43...
#    Running block 44...
#    Running block 45...
#    Running block 46...
#    Running block 47...
#    Running block 48...
#    Running block 49...
#    Running block 50...
#    Running block 51...
#    Running block 52...
#    Running block 53...
#    Running block 54...
#    Running block 55...
#    Running block 56...
#    Running block 57...

#Save PC-realte object
saveRDS(mypcrel, paste0(out_prefix, "pcr_obj_1it.rds"))

#Delete pc-Relate object to be sure this worked

## plot
pcrel <- readRDS(file = "higherLDpcr_obj_1it.rds")
kinship <- pcrel$kinBtwn

png("higherLDkinship_1it.png")
ggplot(kinship, aes(k0, kin)) +
    geom_hline(yintercept=2^(-seq(3,9,2)/2), linetype="dashed", color = "grey") +
    geom_point(alpha=0.2) +
    ylab("kinship estimate") +
    ggtitle("kinship")
dev.off()

rm(pcrel)

## develop 2nd iteration PC-Air
mypcrel <- readRDS(file = "higherLDpcr_obj_1it.rds")
pcrelate_matrix <- pcrelateToMatrix(mypcrel, scaleKin=1)
#Using 4971 samples provided
#Identifying clusters of relatives...
#    4971 relatives in 1 clusters; largest cluster = 4971
#Creating block matrices for clusters...
#0 samples with no relatives included


### Check number in related and unrelated set using pcairPartition
pc_part1 <- pcairPartition(gds, kinobj = pcrelate_matrix, kin.thresh = 2^(-9/2), div.thresh = -2^(-9/2), divobj = kingMat)
#Warning message:
#In pcairPartition(gds, kinobj = pcrelate_matrix, kin.thresh = 2^(-9/2),  :
#  some samples in unrel.set are not in kinobj or divobj; they will not be included
str(pc_part1)
#List of 2
# $ rels  : chr [1:960] "S71706" "S48216" "S25290" "S35496" ...
# $ unrels: chr [1:4011] "S10003" "S10014" "S10074" "S10130" ...

kin_thresh <- 2^(-9/2)
div_thresh <- -2^(-9/2)

pca <- pcair(gds, kinobj = pcrelate_matrix, kin.thresh = kin_thresh, div.thresh = div_thresh, divobj = kingMat, snp.include = variant_id, sample.include = sample_id)
#Using kinobj and divobj to partition samples into unrelated and related sets
#Working with 4971 samples
#Identifying relatives for each sample using kinship threshold 0.0441941738241592
#Identifying pairs of divergent samples using divergence threshold -0.0441941738241592
#Partitioning samples into unrelated and related sets...
#Unrelated Set: 4011 Samples
#Related Set: 960 Samples
#Performing PCA on the Unrelated Set...
#Principal Component Analysis (PCA) on genotypes:
#Calculating allele counts/frequencies ...
#[==================================================] 100%, completed, 9.1m
#Working space: 4,011 samples, 565,878 SNVs
#    using 1 (CPU) core
#CPU capabilities: Double-Precision SSE2
#Sun Jun  7 23:58:49 2020    (internal increment: 772)
#[=============================================>....] 89%, ETC: 6.5m
#[==================================================] 100%, completed, 57.7m
#Mon Jun  8 00:56:30 2020    Begin (eigenvalues and eigenvectors)
#Mon Jun  8 00:56:49 2020    Done.
#Predicting PC Values for the Related Set...
#SNP loading:
#Working space: 4011 samples, 565878 SNPs
#    using 1 (CPU) core
#    using the top 32 eigenvectors
#Mon Jun  8 00:57:22 2020    (internal increment: 6200)
#[==================================================] 100%, completed, 9.8m
#Mon Jun  8 01:07:11 2020    Done.
#Sample loading:
#Working space: 960 samples, 565878 SNPs
#    using 1 (CPU) core
#    using the top 32 eigenvectors
#Mon Jun  8 01:07:54 2020    (internal increment: 25904)
#[==================================================] 100%, completed, 9.2m
#Mon Jun  8 01:17:07 2020    Done.

print(str(pca))
#List of 12
# $ vectors   : num [1:4971, 1:32] -0.00404 -0.00437 -0.00111 -0.00382 -0.00104 ...
#  ..- attr(*, "dimnames")=List of 2
#  .. ..$ : chr [1:4971] "S66366" "S48371" "S92611" "S30713" ...
#  .. ..$ : NULL
# $ values    : num [1:32] 24.44 5.37 5.2 3.49 3.37 ...
# $ rels      : chr [1:960] "S71706" "S48216" "S25290" "S35496" ...
# $ unrels    : chr [1:4011] "S10003" "S10014" "S10074" "S10130" ...
# $ kin.thresh: num 0.0442
# $ div.thresh: num -0.0442
# $ sample.id : chr [1:4971] "S66366" "S48371" "S92611" "S30713" ...
# $ nsamp     : int 4971
# $ nsnps     : int 565878
# $ varprop   : num [1:4011] 0.006094 0.001339 0.001296 0.000872 0.000841 ...
# $ call      : language .pcair(gdsobj = gdsobj, kinobj = ..1, divobj = ..4, kin.thresh = ..2, div.thresh = ..3,      sample.include = ..6| __truncated__
# $ method    : chr "PC-AiR"
# - attr(*, "class")= chr "pcair"
#NULL

#Save PC-Air object
saveRDS(pca, paste0(out_prefix, "pcair.rds"))

rm(pca)

## plot
#Read in phenotype and subset by keep_samples
phenotype <- readRDS("phenotype.rds")
keep_samples <- readRDS(file = "keep_samples.rds")
phenotype <- phenotype[phenotype$sid %in% keep_samples,]

pca <- readRDS("higherLDpcair.rds")
pcs.df <- as.data.frame(pca$vectors[,1:7])
pcs.df$sid <- rownames(pcs.df)
pcs.df <- merge(pcs.df, phenotype[,c("sid","site", "race_or_ethnicity")], by="sid", all.x = TRUE, all.y = FALSE)

rels_V <- pca$rels
pcs.df$relate <- ifelse(pcs.df$sid %in% rels_V, "related", "unrelated")

png(paste0(out_prefix, "_PC1and2.png"))
ggplot() +
   geom_point(aes(pcs.df[,2], pcs.df[,3], col = factor(pcs.df$race_or_ethnicity), pch = pcs.df$relate)) +
   xlab("PC 1") + ylab("PC 2") +
   scale_shape(solid = FALSE) +
   labs(col= "Race or Ethnicity", shape="PC set")
dev.off()


png(paste0(out_prefix, "_PC2and3.png"))
ggplot() +
   geom_point(aes(pcs.df[,3], pcs.df[,4], col = factor(pcs.df$race_or_ethnicity), pch = pcs.df$relate)) +
   xlab("PC 2") + ylab("PC 3") +
   scale_shape(solid = FALSE) +
   labs(col= "Race or Ethnicity", shape="PC set")
dev.off()


png(paste0(out_prefix, "_PC3and4.png"))
ggplot() +
   geom_point(aes(pcs.df[,4], pcs.df[,5], col = factor(pcs.df$race_or_ethnicity), pch = pcs.df$relate)) +
   xlab("PC 3") + ylab("PC 4") +
   scale_shape(solid = FALSE) +
   labs(col= "Race or Ethnicity", shape="PC set")
dev.off()

#Plot percent variance explained by each pc:
var_prop_vect <- 100*pca$varprop[1:12]
PC_labs <- 1:12

png(paste0(out_prefix, "percent_var.png"))
plot(x=PC_labs, y = var_prop_vect, xlab = "PC", ylab = "percent variance accounted for")
dev.off()


rm(pca)



## Develop 2nd iteration relatedness matrix
pca <- readRDS("higherLDpcair.rds")

resetIterator(iterator, verbose = TRUE)
## of selected variants: 10,000
str(iterator)
#Formal class 'SeqVarBlockIterator' [package ""] with 6 slots
#  ..@ variantBlock : int 10000
#  ..@ variantFilter:List of 57
#  .. ..$ 1 : int [1:10000] 1683 2190 2215 3755 6388 10751 10852 11502 13043 13048 ...
#  .. ..$ 2 : int [1:10000] 4279555 4279560 4279561 4279738 4279822 4280802 4281131 4281243 4281307 4281392 ...
#  .. ..$ 3 : int [1:10000] 9659133 9659169 9659213 9659225 9659374 9659516 9659800 
#...
#  .. ..$ 57: int [1:5878] 114525331 114525527 114525773 114525797 114525841 114525922 114526049 114526622 114526681 114526931 ...
#  ..@ lastFilter   :<environment: 0x5555b3a895a0>
#  ..@ sampleData   :Formal class 'AnnotatedDataFrame' [package "Biobase"] with 4 slots
#  .. .. ..@ varMetadata      :'data.frame':     0 obs. of  1 variable:
#  .. .. .. ..$ labelDescription: chr(0)
#  .. .. ..@ data             :'data.frame':     5134 obs. of  0 variables
#  .. .. ..@ dimLabels        : chr [1:2] "rowNames" "columnNames"
#  .. .. ..@ .__classVersion__:Formal class 'Versions' [package "Biobase"] with 1 slot
#  .. .. .. .. ..@ .Data:List of 1
#  .. .. .. .. .. ..$ : int [1:3] 1 1 0
#  ..@ variantData  :Formal class 'AnnotatedDataFrame' [package "Biobase"] with 4 slots
#  .. .. ..@ varMetadata      :'data.frame':     0 obs. of  1 variable:
#  .. .. .. ..$ labelDescription: chr(0)
#  .. .. ..@ data             :'data.frame':     115537943 obs. of  0 variables
#  .. .. ..@ dimLabels        : chr [1:2] "rowNames" "columnNames"
#  .. .. ..@ .__classVersion__:Formal class 'Versions' [package "Biobase"] with 1 slot
#  .. .. .. .. ..@ .Data:List of 1
#  .. .. .. .. .. ..$ : int [1:3] 1 1 0
#  ..@ .S3Class     : chr "gds.class"

pcrel2 <- pcrelate(iterator, pcs = pca$vectors, training.set = pca$unrels)
pcrelate_matrix2 <- pcrelateToMatrix(pcrel2, scaleKin = 2, thresh = kin_thresh)

saveRDS(pcrel2, paste0(out_prefix, "pcr_obj.rds"))
saveRDS(pcrelate_matrix2, paste0(out_prefix, "pcr_grm.rds"))

#delete PC relate object to make sure this worked
rm(pcrel2)

## plot
pcrel <- readRDS(file = "higherLDpcr_obj.rds")
kinship <- pcrel$kinBtwn

png("higherLDkinship.png")
ggplot(kinship, aes(k0, kin)) +
    geom_hline(yintercept=2^(-seq(3,9,2)/2), linetype="dashed", color = "grey") +
    geom_point(alpha=0.2) +
    ylab("kinship estimate") +
    ggtitle("kinship")
dev.off()


# 6/8
## Regenerate 1st iteration PC-Relate using only the first 3 eigenvectors from PC-Air to test whether this makes a big difference


# 6/9
## Association testing

library(SeqArray)
library(SeqVarTools)
library(Biobase)
library(GENESIS)
sessionInfo()

gds <- seqOpen("CFF_sid_onlyGT.gds")
pheno <- readRDS("annot.rds")
variant_id <- readRDS("keep_var_stringent.rds")
sample_id <- readRDS("keep_samples.rds")
grm <- readRDS("higherLDpcr_grm.rds")

#check for compatability:
gds.id <- seqGetData(gds, "sample.id")
head(gds.id)
#[1] "S66366" "S48371" "S92611" "S30713" "S43109" "S58186"
head(pData(pheno)$sample.id)
#[1] "S66366" "S48371" "S92611" "S30713" "S43109" "S58186"
identical(gds.id, pData(pheno)$sample.id)
#[1] TRUE

sum(sample_id %in% gds.id)
#[1] 4971

grm[1:5,1:5]
#5 x 5 sparse Matrix of class "dsCMatrix"
#          S10063    S22752    S10252    S82601    S10656
#S10063 0.9143344 0.4072069 .         .         .
#S22752 0.4072069 0.9044073 .         .         .
#S10252 .         .         0.9018518 0.3630782 .
#S82601 .         .         0.3630782 0.9021806 .
#S10656 .         .         .         .         0.8943037
#Note: grm IDs are not in the same order as gds

nrow(grm)
#[1] 4971

sum(colnames(grm) %in% gds.id)
#[1] 4971


#Generate null model
seqData <- SeqVarData(gds, sampleData = pheno)
seqSetFilter(gds, variant.id = variant_id, sample.id = sample_id)

## of selected samples: 4,971
## of selected variants: 6,829,196
iterator <- SeqVarBlockIterator(seqData, verbose=TRUE)
## of selected variants: 10,000
str(iterator)
#Formal class 'SeqVarBlockIterator' [package ""] with 6 slots
#  ..@ variantBlock : int 10000
#  ..@ variantFilter:List of 683
#  .. ..$ 1  : int [1:10000] 1683 2190 2204 2215 3754 3755 3933 5866 6388 10751 ...
#  .. ..$ 2  : int [1:10000] 267146 267151 267167 267175 267197 267200 267224 267239 267240 267249 ...

covars <- c("PC1", "PC2", "PC3", "PC4")
outcome <- "F508_count"
family <- "poisson"

nullmod <- fitNullModel(pheno, outcome = outcome, covars = covars,
                        cov.mat = grm, family = family, sample.id = sample_id)
#Computing Variance Component Estimates...
#Sigma^2_A     log-lik     RSS
#[1]     0.0100000 -2689.3888020     0.2546535
#[1]  4.583991e-03 -2.692676e+03  2.568448e-01
#[1]  1.946151e-03 -2.694302e+03  2.579267e-01
#[1]  6.442046e-04 -2.695110e+03  2.584642e-01
#[1]  3.208055e-04 -2.695312e+03  2.585981e-01
#[1]  1.593648e-04 -2.695412e+03  2.586650e-01
#Updating WorkingY Vector...
#Computing Variance Component Estimates...
#Sigma^2_A     log-lik     RSS
#[1]  1.593648e-04 -2.695650e+03  2.586897e-01

assoc <- assocTestSingle(iterator, nullmod)

## This seems to be working but is taking a really long time... will try subsetting by chromosome




# 6/10


library(SeqArray)
library(SeqVarTools)
library(Biobase)
library(GENESIS)
sessionInfo()

gds <- seqOpen("CFF_sid_onlyGT.gds")
pheno <- readRDS("annot.rds")
variant_id <- readRDS("keep_var_stringent.rds")
sample_id <- readRDS("keep_samples.rds")
grm <- readRDS("higherLDpcr_grm.rds")

#Generate null model
seqData <- SeqVarData(gds, sampleData = pheno)

#filter to just test 1 chromosome for now
seqSetFilter(gds, variant.id = variant_id, sample.id = sample_id)
## of selected samples: 4,971
## of selected variants: 6,829,196

seqSetFilterChrom(gds, 1)
## of selected variants: 9,936,669
#this reset the filter

#Check how many variants I expect to get:
seqSetFilter(gds)
## of selected samples: 5,134
## of selected variants: 115,537,943

gds.var <- seqGetData(gds, "variant.id")
gds.chrom <- seqGetData(gds, "chromosome")
sum(gds.chrom == 1)
#[1] 9936669
gds.var_1 <- gds.var[1:9936669]
chr1_vars.temp <- intersect(gds.var_1, variant_id)
length(chr1_vars.temp)
#[1] 420226

#Reset the sample and variant ID filter ontop of the chromosome filter using action argument
seqSetFilterChrom(gds, 1)
## of selected variants: 9,936,669
seqSetFilter(gds, variant.id = variant_id, sample.id = sample_id, action = "intersect")
## of selected samples: 4,971
## of selected variants: 420,226 #Yes!

iterator <- SeqVarBlockIterator(seqData, verbose=TRUE)

covars <- c("PC1", "PC2", "PC3", "PC4")
outcome <- "F508_count"
family <- "poisson"

nullmod <- fitNullModel(pheno, outcome = outcome, covars = covars,
                        cov.mat = grm, family = family, sample.id = sample_id)
#It is redundant to have sample.id here twice, but could use this to filter out additional people that weren't filteres in PC and GRM generation (like identical tiwn pairs)

nullmod$fixef
#                   Est         SE        Stat         pval
#(Intercept)  0.3031544 0.02127095 203.1206403 4.353755e-46
#PC1          2.9264957 0.46395985  39.7864316 2.833064e-10
#PC2         -1.4952900 0.71854416   4.3305590 3.743395e-02
#PC3         -2.0021810 0.74948315   7.1364617 7.553205e-03
#PC4         -0.4489079 0.48903018   0.8426422 3.586422e-01

assoc <- assocTestSingle(iterator, nullmod)
## of selected samples: 4,971
#Iteration 1 of 43 completed
#Iteration 2 of 43 completed
#Iteration 3 of 43 completed
#...
#Iteration 34 of 43 completed
#Error in asMethod(object) :
#  Cholmod error 'out of memory' at file ../Core/cholmod_memory.c, line 147

## Try a larger variant block for iterator
resetIterator(iterator, verbose = TRUE)

iterator <- SeqVarBlockIterator(seqData, variantBlock = 3000, verbose=TRUE)
assoc <- assocTestSingle(iterator, nullmod)


# 6/11
gds <- seqOpen("CFF_sid_onlyGT.gds")
pheno <- readRDS("annot.rds")
variant_id <- readRDS("keep_var_stringent.rds")
sample_id <- readRDS("keep_samples.rds")
grm <- readRDS("higherLDpcr_grm.rds")
seqData <- SeqVarData(gds, sampleData = pheno)
seqSetFilterChrom(gds, 21)
## of selected variants: 1,722,032
seqSetFilter(gds, variant.id = variant_id, sample.id = sample_id, action = "intersect")
## of selected samples: 4,971
## of selected variants: 103,926

iterator <- SeqVarBlockIterator(seqData, verbose=TRUE)

covars <- c("PC1", "PC2", "PC3", "PC4")
outcome <- "F508_count"
family <- "poisson"

nullmod <- fitNullModel(pheno, outcome = outcome, covars = covars,
                        cov.mat = grm, family = family, sample.id = sample_id)
assoc <- assocTestSingle(iterator, nullmod)

out_file <- "higher_LDpercent_var_assoc.rds"
saveRDS(assoc, out_file)

## 



# 6/12
## Regenerate LD_pruned SNP list:
R -q --vanilla --args CFF_sid_onlyGT.gds --sample_id keep_samples.rds --variant_id keep_var_stringent.rds --window_size 1 < ld_pruning.R > 6,12_pruned_snps.log &

# 6/13
## generate pcs and grm
R -q --vanilla --args CFF_sid_onlyGT.gds --out_prefix 6,13 --variant_id pruned_snps.rds --sample_id keep_samples.rds --kin_thresh1 3 --div_thresh1 4.5 --kin_thresh 4.5 --div_thresh 4.5 --n_pcs 12 --keep_king < pc_grm_troubleshoot.R > pc_grm_troubleshoot_6,12.log &



# 6/12 - 6/15
## Getting PCs and kinship estimates under different parameters
*Note: the pc_grm_troubleshoot script take kin_thresh and div_thresh in different format

# Regenerate LD_pruned SNP list:
R -q --vanilla --args CFF_sid_onlyGT.gds --sample_id keep_samples.rds --variant_id keep_var_stringent.rds --window_size 1 < ld_pruning.R > 6,12_pruned_snps.log &

# Run all of PC-Air and Relate iterations using standard inputs
R -q --vanilla --args CFF_sid_onlyGT.gds --out_prefix 6,13 --variant_id pruned_snps.rds --sample_id keep_samples.rds --kin_thresh1 3 --div_thresh1 4.5 --kin_thresh 4.5 --div_thresh 4.5 --n_pcs 12 --keep_king < pc_grm_troubleshoot.R > pc_grm_troubleshoot_6,12.log &
## Get King and 1st and 2nd iteration kinship plots and 2nd iteration PC plots
R -q --vanilla --args 6,13king_obj.rds --out_prefix 6,13_king --is_king < plot_kinship.R &
R -q --vanilla --args 6,13pcr_obj_1it.rds --out_prefix 6,13_1it < plot_kinship.R &
R -q --vanilla --args 6,13pcr_obj.rds --out_prefix 6,13 < plot_kinship.R &
R -q --vanilla --args 6,13pcair.rds --out_prefix 6,13 --phenotype_file annot.rds --group race_or_ethnicity < pca_plots.R &


#Note: unlike the pcs_and_grm.R and pc_grm_troubleshoot.R, pcair.R takes the kinship and divergence thresholds as arguments (not the exposnents for these thresholds)
#I couldn't get the command line to accept a negative number as an input so I modified the script to make the div thresh negative
# Using king matrix from 6/13 LD pruning sqrt(0.1), generate 1st kinship plots using kin_thresh = 4 for 1st PC-Air
R -q --vanilla --args CFF_sid_onlyGT.gds 6,13king_robust_grm.rds 6,13king_robust_grm.rds --variant_id pruned_snps.rds --sample_id keep_samples.rds --out_prefix kin_thresh4 --kin_thresh 0.0625 --div_thresh 0.0442 < pcair.R > kin_thresh4_pcAir.log &
R -q --vanilla --args CFF_sid_onlyGT.gds kin_thresh4pcair.rds --out_prefix kin_thresh4 --variant_id pruned_snps.rds --sample_id keep_samples.rds < pcrelate.R > kin_thresh4_pcRelate.log &
## plot
R -q --vanilla --args kin_thresh4pcrelate.rds --out_prefix kin_thresh4_1it < plot_kinship.R &
## Get total related and unrelateds based on these conditions (this should also be in the log, but the log is cutting off the last part of the analysis)
king <- readRDS("6,13king_robust_grm.rds")
library(SeqArray)
library(GENESIS)
gds <- seqOpen("CFF_sid_onlyGT.gds")
pc_part1 <- pcairPartition(gds, kinobj = king, kin.thresh = 2^(-4), div.thresh = -2^(-4.5), divobj = king)
#some samples in unrel.set are not in kinobj or divobj; they will not be included
#No idea where this warning is coing from!!!
str(pc_part1)
# $ unrels: chr [1:14] "S95170" "S66538" "S77769" "S44473" ...

# Using king matrix from 6/13 LD pruning sqrt(0.1), generate 1st kinship plots using div_thresh = 3 for 1st PC-Air
R -q --vanilla --args CFF_sid_onlyGT.gds 6,13king_robust_grm.rds 6,13king_robust_grm.rds --variant_id pruned_snps.rds --sample_id keep_samples.rds --out_prefix div_thresh3 --kin_thresh 0.125 --div_thresh 0.125 < pcair.R > div_thresh3_pcAir.log &
R -q --vanilla --args CFF_sid_onlyGT.gds div_thresh3pcair.rds --out_prefix div_thresh3 --variant_id pruned_snps.rds --sample_id keep_samples.rds < pcrelate.R > div_thresh3_pcRelate.log &
## plot
R -q --vanilla --args div_thresh3pcrelate.rds --out_prefix div_thresh3_1it < plot_kinship.R &

# Using PC-Air object from 6/13 LD pruning sqrt(0.1), generate 1st kinship plots using just 1 PC
R -q --vanilla --args CFF_sid_onlyGT.gds 6,13pcair_1it.rds --out_prefix twoPC --variant_id pruned_snps.rds --sample_id keep_samples.rds --n_pcs 2 < pcrelate.R > twoPC_pcrelate.log &
#Note:tried to run with just one PC but got this error:
#"pcs should be a matrix of PCs with rownames set to sample.ids"
#I think that pcrelate won't accept a single PC (rather than this being a problem with the code, because it didn't work when I manually hcanged the number of PCs to 1)
## plot
R -q --vanilla --args twoPCpcrelate.rds --out_prefix twoPC_1it < plot_kinship.R &

# 6/14 I realized a forgoto to set the type in kin to King-robust, so I fixed that and re-ran everything (I overwrote all files run without the King-Robust input)
#It is unclear what the default type is, but this change did not make any visually-noticible difference to my plots


# With LD pruning R^2 = 0.2, Run all of PC-Air and Relate iterations using standard inputs
R -q --vanilla --args CFF_sid_onlyGT.gds --out_prefix LD0.2 --variant_id pruned_higherLD.rds --sample_id keep_samples.rds --kin_thresh1 3 --div_thresh1 4.5 --kin_thresh 4.5 --div_thresh 4.5 --n_pcs 12 --keep_king < pc_grm_troubleshoot.R > pc_grm_troubleshoot_LD0.2.log &
## Get King and 1st and 2nd iteration kinship plots and 2nd iteration PC plots
R -q --vanilla --args LD0.2king_obj.rds --out_prefix LD0.2_king --is_king < plot_kinship.R &
R -q --vanilla --args LD0.2pcr_obj_1it.rds --out_prefix LD0.2_1it < plot_kinship.R &

# With LD pruning R^2 = 0.1, but no prior QC: Run all of PC-Air and Relate iterations using standard inputs
## Get pruned SNPs
R -q --vanilla --args CFF_sid_onlyGT.gds --out_file pruned_snps_noQC.rds --sample_id keep_samples.rds --window_size 1 < ld_pruning.R > noQC_pruned_snps.log &
## Run all of PC-Air and Relate iterations using standard inputs
R -q --vanilla --args CFF_sid_onlyGT.gds --out_prefix noQC --variant_id pruned_higherLD.rds --sample_id keep_samples.rds --kin_thresh1 3 --div_thresh1 4.5 --kin_thresh 4.5 --div_thresh 4.5 --n_pcs 12 --keep_king < pc_grm_troubleshoot.R > pc_grm_troubleshoot_noQC.log &
## Get King and 1st and 2nd iteration kinship plots and 2nd iteration PC plots
R -q --vanilla --args noQCking_obj.rds --out_prefix noQC_king --is_king < plot_kinship.R &
R -q --vanilla --args noQCpcr_obj_1it.rds --out_prefix noQC_1it < plot_kinship.R &






# 6/15
## remoove problematic LD regions
library(SeqArray)

gds <- seqOpen("CFF_sid_onlyGT.gds")

filt <- get(data(list=paste("pcaSnpFilters", "hg38", sep="."), package="GWASTools"))

#Now I need to figure out how to excldue the CFTR delation region (chr7:117559591-117559594 (GRCh38.p12))

head(filt)
#         chrom start.base  end.base      comment
#2q21         2  129125957 139525961          LCT
#HLA          6   24091793  38924246 includes MHC
#8p23         8    6755071  13598120    inversion
#17q21.31    17   42394456  46567318    inversion

nrow(filt)
#[1] 4

#Find average length of regions included in filt (note: end.base is always > start.base)
mean(filt$end.base - filt$start.base)
#[1] 9062092

add_regions <- data.frame(t(c(7, 1, 159345973, "to exclude deltaF508")))
colnames(add_regions) <- colnames(filt)
rownames(add_regions) <- "chr7"
saveRDS(add_regions, "exclude_regions_chr7.rds")

add_regions <- readRDS("exclude_regions_chr7.rds")

filt <- rbind(filt, add_regions)

chrom <- seqGetData(gds, "chromosome")
pos <- seqGetData(gds, "position")
pca.filt <- rep(TRUE, length(chrom))
for (f in 1:nrow(filt)) {
    pca.filt[chrom == filt$chrom[f] & filt$start.base[f] < pos & pos < filt$end.base[f]] <- FALSE
}
seqSetFilter(gds, variant.sel=pca.filt, action="intersect", verbose=TRUE)
## of selected variants: 111,797,708

PCAcorr_snps <- seqGetData(gds, "variant.id")
length(PCAcorr_snps)
#[1] 111797708
#save just the list of SNPs not in the excluded region:
saveRDS(PCAcorr_snps, "PCAcorr_snps.rds")

pruned <- readRDS("pruned_snps.rds")
length(pruned)
#[1] 394140

pruned_excludedRegions_andChr7 <- intersect(pruned, PCAcorr_snps)
length(pruned_excludedRegions_andChr7)
#[1] 380171

#These variant counts make sense
#I will update LD-prunign script to optionally excldue LD-problematic regions and/or a specified region.
#to avoid re-running LD-pruning, for now I will just save the intersected file.

saveRDS(pruned_excludedRegions_andChr7, "pruned_excludedRegions_andChr7.rds")
write(pruned_excludedRegions_andChr7, "pruned_excludedRegions_andChr7.txt", ncolumns = 1)






# 6/15
## Re-run all of King, PC-Air, and PC-Relate using updated pruned SNP list
R -q --vanilla --args CFF_sid_onlyGT.gds --out_prefix 6,15 --variant_id pruned_excludedRegions_andChr7.rds --sample_id keep_samples.rds --kin_thresh1 3 --div_thresh1 4.5 --kin_thresh 4.5 --div_thresh 4.5 --n_pcs 12 --keep_king < pc_grm_troubleshoot.R > pc_grm_troubleshoot_6,15.log &
### plot kinship
R -q --vanilla --args 6,15king_obj.rds --out_prefix 6,15_king --is_king < plot_kinship.R &
R -q --vanilla --args 6,15pcr_obj_1it.rds --out_prefix 6,15_1it < plot_kinship.R &
R -q --vanilla --args 6,15pcr_obj.rds --out_prefix 6,15 < plot_kinship.R &
R -q --vanilla --args 6,15pcair.rds --out_prefix 6,15 --phenotype_file annot.rds --group race_or_ethnicity < pca_plots.R &


## Use the PC object with updated pruning criteria to get a 1st iteration pc-relate based on a single PC
R -q --vanilla --args CFF_sid_onlyGT.gds 6,15pcair_1it.rds --out_prefix onePC --variant_id pruned_snps.rds --sample_id keep_samples.rds --n_pcs 1 < pcrelate.R > 6,15onePC_pcrelate.log &
R -q --vanilla --args onePC_1itpcrelate.rds --out_prefix onePC_1it < plot_kinship.R &


# 6/16
## Re-run all of King, PC-Air, and PC-Relate using updated pruned SNP list
R -q --vanilla --args CFF_sid_onlyGT.gds --out_prefix 6,15 --variant_id pruned_excludedRegions_andChr7.rds --sample_id keep_samples.rds --kin_thresh1 3 --div_thresh1 4.5 --kin_thresh 4.5 --div_thresh 4.5 --n_pcs 12 --keep_king < pc_grm_troubleshoot.R > pc_grm_troubleshoot_6,15.log &
R -q --vanilla --args 6,15pcr_obj_1it.rds --out_prefix 6,15_1it < plot_kinship.R &






# 6/16
## Exclude identical twins, dulicates, and non-white people from PCs
### Get a vector of only self-identified white people (since this sample is majorily while, I excluded anyone of mixed race and anyone who identified as hispanic
phenotype <- readRDS("phenotype.rds")

Only select non-hispanic white people
Eur <- phenotype[phenotype$race_white == 1 & !is.na(phenotype$race_white) & phenotype$race_black != 1 & phenotype$race_natAm != 1 & phenotype$race_asian != 1 & phenotype$race_pac != 1 & phenotype$race_other != 1, "sid"]
Eur <- as.character(Eur)
length(Eur)
#[1] 4895

saveRDS(Eur, "keep_Eur_samples.rds")
write(Eur, "keep_Eur_samples.txt", ncol = 1)


### Exclude identical twins (and any duplicates that slipped past QC)
pcrel2 <- readRDS("6,15pcr_obj.rds")
kinship <- pcrel2$kinBtwn

#Find likely identical twins
range(kinship$kin)
kinship[kinship$kin > 0.28, c("kin", "k2", "ID1", "ID2")]

#Remove identical twins from keep_samples vector
exclude_one_twin <- kinship[kinship$kin > 0.28, "ID1"] #ID1 is always the lowest of the 2 number IDs
keep_samples <- readRDS(file = "keep_samples.rds")
length(keep_samples)
#[1] 4971

"%notin%" <- Negate("%in%")
keep_one_mzTwin_samples <- keep_samples[keep_samples %notin% exclude_one_twin]
length(keep_one_mzTwin_samples)
#[1] 4945

saveRDS(keep_one_mzTwin_samples, file = "keep_one_mzTwin_samples.rds")
write(keep_one_mzTwin_samples, file = "keep_one_mzTwin_samples.txt", ncol = 1)

## Develop a combined sample filter (excludes based on QC and 1 of each MZ twin pair, only self-identified white)
combined_filter <- intersect(intersect(keep_samples, keep_one_mzTwin_samples), Eur)
length(combined_filter)
#[1] 4720

saveRDS(combined_filter, "keep_samples_twin_and_Eur_filter.rds")
write(combined_filter, "keep_samples_twin_and_Eur_filter.txt", ncol = 1)


## Get PC-Air and Relate for this subset of samples
R -q --vanilla --args CFF_sid_onlyGT.gds --out_prefix 6,16sample_subset --variant_id pruned_excludedRegions_andChr7.rds --sample_id keep_samples_twin_and_Eur_filter.rds --kin_thresh1 3.5 --div_thresh1 4.0 --kin_thresh 4.5 --div_thresh 4.5 --n_pcs 3 --keep_king < pc_grm_troubleshoot.R > pc_grm_troubleshoot_6,16sample_subset.log &
### plot
R -q --vanilla --args 6,16sample_subsetpcr_obj_1it.rds --out_prefix 6,16sample_subset_1it < plot_kinship.R &




# 6/17
Figure out association testing
## First just for 1 chromosome (note: script it in local folder, not updated on github yet):
R -q --vanilla --args CFF_sid_onlyGT.gds annot.rds temp_pcr_grm.rds F508_count gaussian --out_file test_assoc.rds --covars "PC1 PC2 PC3" --variant_id keep_var_stringent.rds --sample_id keep_samples_twin_and_Eur_filter.rds --chromosome 21 < assoc_test.R > assoc_test.log &

### This is working. Now add in parallelization:
for f in {1..22}; do echo "Assoc_testing '$f' "
R -q --vanilla --args CFF_sid_onlyGT.gds annot.rds temp_pcr_grm.rds F508_count gaussian --out_file "$f" --covars "PC1 PC2 PC3" --variant_id keep_var_stringent.rds --sample_id keep_samples_twin_and_Eur_filter.rds --chromosome f < assoc_test.R & sleep 30 done


### Make output clearer & save a log file:
for f in {1..22}; do echo "Assoc_testing '$f' "
R -q --vanilla --args CFF_sid_onlyGT.gds annot.rds temp_pcr_grm.rds F508_count gaussian --out_prefix "$f" --covars "PC1 PC2 PC3" --variant_id keep_var_stringent.rds --sample_id keep_samples_twin_and_Eur_filter.rds --chromosome f < assoc_test.R & sleep 30 done




# Yikes! The flag.metric.RData file may be in a divverent order than my variant.ids
gds <- seqOpen("/home/hkings/DATA/CFF_sid_onlyGT.gds")

load("flag.metric.RData")
str(flag.metric.df)

match("2", flag.metric.df$chr)
#[1] 9936670

flag.metric.df[9936670, c("variant.id", "chr", "pos")]
#        variant.id chr   pos
#9936670    9936670   2 10188

#Now look at 1 variant before that:
flag.metric.df[9936669, c("variant.id", "chr", "pos")]
#        variant.id chr       pos
#9936669    9936669   1 248946405
#This is a different order than for my data. Not good!
#I will need to re-order my varaint list to match based on chr and position

sum(seqGetData(gds, "variant.id") %in% flag.metric.df$variant.id)
#[1] 115537943
sum(flag.metric.df$variant.id %in% seqGetData(gds, "variant.id"))
#[1] 115537943


position <- seqGetData(gds, "position")
chromosome <- seqGetData(gds, "chromosome")
variant <- seqGetData(gds, "variant.id")
gds.ids <- data.frame(position, chromosome, variant, stringsAsFactors=FALSE)

#Exclude X chromosome from flag.metric.df because not in my gds file
flag.metrix.df2 <- flag.metric.df[flag.metric.df$chr != "X",]

#dataframes are now the same size
nrow(gds.ids)
#[1] 115537943
nrow(flag.metric.df2)
#[1] 115537943

#Add a column for gds variant ID to flag.metric dataframe
flag.metrix.df2$gds.var.id <- NULL 

for(i in 1:nrow(flag.metric.df2)){
    flag.metric.df2$gds.var.id[i] <- gds.ids[gds.ids$chromosome == flag.metric.df2$chr[i] & gds.ids$position == flag.metric.df2$pos[i], "variant"]
    if(i == 1000000){
        print("1 mil run")
      }
}

gds.ids[

#This didn't work
head(flag.metric.df2)
#...
#  flag.info_RAWMQ.50000 flag.info_RAWMQ.1e+05 gds.var.id
#1                 FALSE                 FALSE          1
#2                 FALSE                 FALSE          2
#3                 FALSE                 FALSE          3

#The gds.var.id is just 1 after the 1st chromosome:
flag.metric.df2[match("2",flag.metric.df2$chr),]
#...
#        flag.info_RAWMQ.50000 flag.info_RAWMQ.1e+05 gds.var.id
#39936670                 FALSE                 FALSE          1
flag.metric.df2[39936670:39936675,]
#         gds.var.id
#39936670          1
#39936671          1
#39936672          1

gds.ids[match("2", gds.ids$chromosome),]
#...
#         position chromosome  variant
#51629765    10188          2 51629765

flag.metric.df2[match("3",flag.metric.df2$chr),]
#...
#         gds.var.id
#19814256          1





#Will use Adrienne's script instead

#First, verify that all variants are unique by position and chromosome

anyDuplicated(flag.metric.df.temp)
[1] 0
        
anyDuplicated(gds.ids.temp)
#[1] 2

anyDuplicated(gds.ids.temp, fromLast = TRUE)
#[1] 115537942

gds.ids.temp[c(2,115537942),]
#           chromosome position
#1.1                 1    10109
#22.1809410          1    10156
#I can't make sense of this, but since there's no duplicates in the flag.metric file, will go ahead

## I regenerated the gds from CFF_5134_onlyGT.gds without filtering out the X chromosome
#Note: this file is in the same (string) order as my merged file.


# 6/22
## How many varaints are above line of qqplot?
sum(assoc$Score.pval < 10^(-10))
#As a percent:
sum(assoc$Score.pval < 10^(-10))/nrow(assoc)



# Get TopMedPipeline installed
/home/hkings/R/x86_64-conda_cos6-linux-gnu-library/3.6




# 6/22
## Re-ran everything with a patch to match the varaint.ids from the gds to those from the flag.metrics file
King and kinship plots now look ok, although 80% of people have King kinship estimates below 0
Association testing for F508 count has lambda around .5, but for sex as the outcome has lambda around 1

#6/23 
## Re-ran everything with a new GDS with chromosomes in the right order. I checked that the varaint.ids from the gds match those from the flag.metrics file
Original problem with incorrect Kin and kinship plots (and way too many related individuals) reappeared



#6/25
## Re-ran King, PCs and GRM using William's pruned SNP list, then realized his list is from only F508 homozygotes, so decided to re-run


6/26
## Re-running everything
Modified LD-pruning to run each chromosome seperately, also exlcuded long-rangeLD regions and all of chr7
length(CFF_5134_onlyGT_prunedSites.rds) #William's pruned SNP list
#[1] 269482

length(6_26_prunedSNPs.rds) #My pruned SNP list - does it make sense that mmine is shorter?
#[1] 171975


# 6/30
## Ran 2nd iteration of PCs and GRM. Plots look good!
#Still need to look at PC correlation plots, but don't want to interfere with assocaition testing so may wait until tonight.
#Based on scree plot and paracord plot, want to use the fist 3 PCs, will use 1st 4 to be safe and this matched what William is doing

assoc test for F508 without PCs still has a surprisingly low lambda:


## What I did:

## generate_null_model.R
### R -q --vanilla --args annot.rds 6_26pcr_mat.rds F508_count poisson --out_prefix "F508del" --covars "PC1 PC2 PC3 PC4 site" --sample_id keep_samples_noTwins.rds < generate_null_model.R > null_model_F508del.log &
### R -q --vanilla --args annot.rds 6_26pcr_mat.rds F508_count poisson --out_prefix "F508del_noPCs" --covars "site" --sample_id keep_samples_noTwins.rds < generate_null_model.R > null_model_F508del_noPCs.log &
### R -q --vanilla --args annot.rds 6_26pcr_mat.rds sex_registry binomial --out_prefix "sex" --covars "PC1 PC2 PC3 PC4 site" --sample_id keep_samples_noTwins.rds < generate_null_model.R > null_model_sex.log &
### R -q --vanilla --args annot.rds 6_26pcr_mat.rds sex_registry binomial --out_prefix "sex_noPCs" --covars "site" --sample_id keep_samples_noTwins.rds < generate_null_model.R > null_model_sex_noPCs.log &


## assoc/assoc_test.sh
### sh assoc_test.sh
Association testing:
#F508 ~ SNPs + PCs 1-4 + site + GRM
### R -q --vanilla --args CFF_sid_onlyGT.gds annot.rds --out_prefix "F508del_chr_$f" --variant_id SNPS_bi_GATK_VQSR_MAF0.05_miss0.05.rds --sample_id keep_samples_noTwins.rds --chromosome "$f" --null_model F508del_nullmod.rds < assoc_test.R > F508del_assoc_test.log &
#F508 ~ SNPs + site + GRM
### R -q --vanilla --args CFF_sid_onlyGT.gds annot.rds --out_prefix "F508del_noPCs_chr_$f" --variant_id SNPS_bi_GATK_VQSR_MAF0.05_miss0.05.rds --sample_id keep_samples_noTwins.rds --chromosome "$f" --null_model F508del_noPCs_nullmod.rds < assoc_test.R > F508del_assoc_test_noPCs.log &
#sex ~ SNPs + PCs 1-4 + site + GRM
### R -q --vanilla --args CFF_sid_onlyGT.gds annot.rds --out_prefix "sex_chr_$f" --variant_id SNPS_bi_GATK_VQSR_MAF0.05_miss0.05.rds --sample_id keep_samples_noTwins.rds --chromosome "$f" --null_model sex_nullmod.rds < assoc_test.R > sex_assoc_test.log &
#sex ~ SNPs + site + GRM
### R -q --vanilla --args CFF_sid_onlyGT.gds annot.rds --out_prefix "sex_noPCs_chr_$f" --variant_id SNPS_bi_GATK_VQSR_MAF0.05_miss0.05.rds --sample_id keep_samples_noTwins.rds --chromosome "$f" --null_model sex_noPCs_nullmod.rds < assoc_test.R > sex_assoc_test_noPCs.log &


## combine_chr_assoc_files.R
recombines association test files into one file (assoc.rds) - chromosomes will be in numerical order
Takes as an argument:
1. prefix for input and output (input files should be in the form: "prefix"chr1assoc.rds)
### Rscript combine_chr_assoc_files.R F508del &
### Rscript combine_chr_assoc_files.R sex &
### Rscript combine_chr_assoc_files.R F508del_noPCs &
### Rscript combine_chr_assoc_files.R sex_noPCs &


## assoc/assoc_plots.R
###  R -q --vanilla --args F508delassoc.rds --out_prefix 6_26F508del --qq_ylim 10 --Man_ylim 6 < assoc_plots.R &
###  R -q --vanilla --args sexassoc.rds --out_prefix 6_26sex  --qq_ylim 10 --Man_ylim 6 < assoc_plots.R &
###  R -q --vanilla --args F508del_noPCsassoc.rds --out_prefix 6_26F508del_noPCs  --qq_ylim 10 --Man_ylim 6 < assoc_plots.R &
###  R -q --vanilla --args F508del_noPCsassoc.rds --out_prefix 6_26F508del_noPCs_higher_y_lim  --qq_ylim 10 --Man_ylim 9 < assoc_plots.R &
###  R -q --vanilla --args sex_noPCsassoc.rds --out_prefix 6_26sex_noPCs  --qq_ylim 10 --Man_ylim 6 < assoc_plots.R &



# 7/2
#Checking null model:
null <- readRDS("2_26.2_30/F508del_noPCs_nullmod.rds")
str(null)
null$fixef
#              Estimate Std. Error   z value     Pr(>|z|)
#(Intercept) 0.33069073 0.01992812 16.594173 7.679425e-62
#siteUNC     0.18561620 0.02705183  6.861503 6.813964e-12
#siteUW      0.04743039 0.03009600  1.575970 1.150327e-01


##How does this compair to the version with PCs?
null <- readRDS("2_26.2_30/F508del_nullmod.rds")
null$fixef
#                    Est         SE       Stat         pval
#(Intercept)  0.33078459 0.01998226 274.031996 1.500296e-61
#PC1         -5.80516077 0.92889596  39.056593 4.116964e-10
#PC2         -2.22295848 0.80913618   7.547784 6.008392e-03
#PC3         -7.01774132 0.86403918  65.967167 4.584974e-16
#PC4          0.81700377 0.80141349   1.039285 3.079877e-01
#siteUNC      0.17543213 0.02713888  41.786359 1.018113e-10
#siteUW       0.03451781 0.03013608   1.311937 2.520442e-01
#Note: site has a similar fixed effect with and without includsion of PCs...
#Not sure how to look at the impact of the GRM matrix pn null model



# 7/2

#Testing with alternative variants from GSA-24v1-0_C2.bed:
bed <- read.table("GSA-24v1-0_C2.bed", skip = 1, header = FALSE)
colnames(bed) <- c("chr", "start_pos", "end_pos", "rs_ID")
bed$chr <- sub("chr", "", bed$chr)
bed$rs_ID <- sub("*-", "", bed$rs_ID)
bed <- bed[bed$chr != "M" & bed$chr != "Y",]

#Note from Liz (6/18 Slack): SNV's position is at end (no start)

nrow(bed)
#[1] 617154



library(SeqVarTools)
library(dplyr)

gds <- seqOpen("CFF_sid_onlyGT.gds")


# Want to map variant id in bed file to variant id in gds.
res_list <- list()
for (chromosome in unique(bed$chr)) {
  #Make a datframe of gds variant info
  seqSetFilterChrom(gds, chromosome)
  # Get variant info for that chromosome from the gds.
  variants_gds <- data.frame(
    position = seqGetData(gds, "position"),
    chromosome = seqGetData(gds, "chromosome"),
    variant_id_gds = seqGetData(gds, "variant.id"),
    rs_ID = seqGetData(gds, "annotation/id"),
    stringsAsFactors = FALSE
  )
  # Subset flag metrics file to this chromosome.
  bed_chr <- bed %>%
    filter(chr == chromosome)
  #Remove duplicates (note: the first of each duplicate has an rs_ID that ends in ".1"
  bed_chr <- bed_chr[!duplicated(bed_chr$end_pos),]
  # Make sure that that no duplicate variants by chromosome and position
  stopifnot(all(!duplicated(bed_chr$end_pos)))
  stopifnot(all(!duplicated(variants_gds$position)))
  shared_variants <- 
  variant_map <- merge(bed_chr, variants_gds, by.x = "end_pos", by.y = "position", all = FALSE)
  res_list[[chromosome]] <- variant_map
  seqResetFilter(gds)
}
res <- bind_rows(res_list)

nrow(res)
#[1] 566747


#spot_check:
rand <- sample(res$variant_id_gds,1)
if(res[res$variant_id_gds == rand, "end_pos"] == seqGetData(gds, "position")[rand]){
           print("Matching WAS succesful")
}

#Compair rsIDs
rand <- sample(res$variant_id_gds,1)
res[res$variant_id_gds == rand, c("rs_ID.x", "rs_ID.y")]


#Generate a variant filter based on the gds_ids in the snp file:
SNP_chip_vars <- res$variant_id_gds
saveRDS(SNP_chip_vars, "SNP_chip_vars.rds") 


#Also exclude non-problematic regions:
non_prob_SNPs <- readRDS("non_prob_snps.rds")


#Save final filter to pass to LD-pruning
pre_LD_SNP_filter <- intersect(non_prob_SNPs, SNP_chip_vars)
length(pre_LD_SNP_filter)
#[1] 540350
saveRDS(pre_LD_SNP_filter, "/home/hkings/DATA/SNP_chip/SNP_chip_pre_LD_SNP_filter.rds")



#LD-pruning with new SNPs:
sh ld_pruning.sh
#Contains:
R -q --vanilla --args CFF_sid_onlyGT.gds --out_prefix "chr_$f" --sample_id keep_samples.rds --variant_id /home/hkings/DATA/SNP_chip/SNP_chip_vars.rds --maf 0.05 --missing 0.05 --window_size 1 --autosome_only TRUE --chromosome "$f" < ld_pruning.R > /home/hkings/DATA/SNP_chip/ld_pruning.log &

Rscript combine_seperate_chr_files.R  /home/hkings/DATA/SNP_chip/
# int [1:83396] 22639 25200 28728 32030 32215 33277 35640 36577 37281 37598 ...


King:
R -q --vanilla --args CFF_sid_onlyGT.gds --out_prefix /home/hkings/DATA/SNP_chip/SNP_chip --variant_id /home/hkings/DATA/SNP_chip/prunedSNPs.rds --sample_id keep_samples.rds --autosome_only TRUE < king_grm.R > SNP_chip_king_grm.log &


PC-AiR:
R -q --vanilla --args CFF_sid_onlyGT.gds /home/hkings/DATA/SNP_chip/SNP_chipking_grm.rds /home/hkings/DATA/SNP_chip/SNP_chipking_grm.rds --out_prefix SNP_chip_1it --variant_id /home/hkings/DATA/SNP_chip/prunedSNPs.rds --sample_id keep_samples.rds --kin_thresh 0.044194 --div_thresh -0.044194 < pcair.R > SNP_chip_1it_pc_air.log &

PC_Relate:
R -q --vanilla --args CFF_sid_onlyGT.gds /home/hkings/DATA/SNP_chip/SNP_chip_1itpcair.rds --out_prefix /home/hkings/DATA/SNP_chip/SNP_chip_1it --n_pcs 4 --variant_id /home/hkings/DATA/SNP_chip/prunedSNPs.rds --sample_id keep_samples.rds --scale_kin 1 --small_samp_correct --variant_block 100000 < pcrelate.R > /home/hkings/DATA/SNP_chip/SNP_chip_1itpcrelate.log &

Look at PC-Relate plots:
Rscript plot_kinship.R /home/hkings/DATA/SNP_chip/SNP_chip_1itpcrelate.rds --out_prefix /home/hkings/DATA/SNP_chip/SNP_chip_1it &
#Looks normal

Followed steps to generate an annotated dataframe using: Generate_annotated_phenotype_df.R
pca <- readRDS("/home/hkings/DATA/SNP_chip/SNP_chip_1itpcair.rds")
doublecheck that F508del count makes sense:
table(phenotype$F508_count)
#   0    1    2
# 369 1770 2938
#Check:
head(phenotype[phenotype$F508_count == 0, c("cftr_var_1_wgs", "cftr_var_2_wgs")])
head(phenotype[phenotype$F508_count == 1, c("cftr_var_1_wgs", "cftr_var_2_wgs")])
head(phenotype[phenotype$F508_count == 2, c("cftr_var_1_wgs", "cftr_var_2_wgs")])

saveRDS(annot, file = "/home/hkings/DATA/SNP_chip/SNP_chip_annot.rds")

#Look at PCs:
Rscript pca_plots.R /home/hkings/DATA/SNP_chip/SNP_chip_1itpcair.rds --out_prefix /home/hkings/DATA/SNP_chip/SNP_chip --phenotype_file /home/hkings/DATA/SNP_chip/SNP_chip_annot.rds --group race_or_ethnicity
#They look normal

## Because the PC and kinship plots look normal, will test for association with the 1st iteration PCs and GRM
### Generate null model:
R -q --vanilla --args /home/hkings/DATA/SNP_chip/SNP_chip_annot.rds /home/hkings/DATA/SNP_chip/SNP_chip_1itpcr_mat.rds F508_count poisson --out_prefix "/home/hkings/DATA/SNP_chip/SNP_chip_1itF508del_noPCs" --covars "site" --sample_id keep_samples_noTwins.rds < generate_null_model.R > /home/hkings/DATA/SNP_chip/SNP_chip_1itnull_model_F508del_noPCs.log &

Look at null model:
null <- readRDS("/home/hkings/DATA/SNP_chip/SNP_chip_1itF508del_noPCs_nullmod.rds")
null$fixef
#              Estimate Std. Error   z value     Pr(>|z|)
#(Intercept) 0.33069073 0.01992812 16.594173 7.679425e-62
#siteUNC     0.18561620 0.02705183  6.861503 6.813964e-12
#siteUW      0.04743039 0.03009600  1.575970 1.150327e-01
#This is identical to what I've gotten before (...because doesn't include PCs... need to understand what the null model does with the GRM)

### Generate assoc test
#Will use SNPs from the intersection on the full SNP list and my QC'd SNP list
SNP_chip_vars <- readRDS("/home/hkings/DATA/SNP_chip/SNP_chip_vars.rds")
QC_SNPs <- readRDS("SNPS_bi_GATK_VQSR_MAF0.05_miss0.05.rds")
#Note: Both of these have been checked to line up against the gds file, although if I was using them for my final analysis, I would check them against eachother
length(SNP_chip_vars)
#[1] 566747
length(QC_SNPs)
#[1] 5490867
sum(SNP_chip_vars %in% QC_SNPs)
[1] 260731 #Only half... this is consistent with the number excldued due to MAF and missingness threholds in QC

SNPs_for_assoc <- intersect(SNP_chip_vars, QC_SNPs)
length(SNPs_for_assoc)

saveRDS(SNPs_for_assoc, "/home/hkings/DATA/SNP_chip/SNPs_for_assoc.rds")


#/home/hkings/DATA/SNP_chip/F508del_assoc_test_noPCs.sh contains:
##!/bin/bash

for f in {1..22}; do
echo "Assoc_testing '$f' "
R -q --vanilla --args CFF_sid_onlyGT.gds /home/hkings/DATA/SNP_chip_annot.rds --out_prefix "/home/hkings/DATA/SNP_chip/SNP_chip_1it_F508del_noPCs_chr_$f" --variant_id /home/hkings/DATA/SNP_chip/SNPs_for_assoc.rds --sample_id keep_samples_noTwins.rds --chromosome "$f" --null_model /home/hkings/DATA/SNP_chip/SNP_chip_1itF508del_noPCs_nullmod.rds < assoc_test.R > /home/hkings/DATA/SNP_chip/SNP_chip_1it_F508del_assoc_test_noPCs.log &

sleep 30
done

#Run with: sh /home/hkings/DATA/SNP_chip/F508del_assoc_test_noPCs.sh

### Combine assoc files:
Rscript combine_chr_assoc_files.R /home/hkings/DATA/SNP_chip/SNP_chip_1it_F508del_noPCs &

### plot assoc results
R -q --vanilla --args /home/hkings/DATA/SNP_chip/SNP_chip_1it_F508del_noPCsassoc.rds --out_prefix /home/hkings/DATA/SNP_chip/SNP_chip_1it_F508del_noPCs --qq_ylim 10 --Man_ylim 6 < assoc_plots.R &




# 7/5
## Redo association test for no PCs case for F508 count
R -q --vanilla --args annot.rds /home/hkings/DATA/2_26.2_30/6_26pcr_mat.rds F508_count poisson --out_prefix "/home/hkings/DATA/2_26.2_30/redo_noPCsF508/F508del_noPCs" --covars "site" --sample_id keep_samples_noTwins.rds < generate_null_model.R > /home/hkings/DATA/2_26.2_30/redo_noPCsF508/null_model_F508del_noPCs.log &

#/home/hkings/DATA/2_26.2_30/redo_noPCsF508/F508del_assoc_test_noPCs.sh contains:
##!/bin/bash

for f in {1..22}; do
echo "Assoc_testing '$f' "
R -q --vanilla --args CFF_sid_onlyGT.gds annot.rds --out_prefix "null_model /home/hkings/DATA/2_26.2_30/redo_noPCsF508/F508del_noPCs_nullmod.rds < assoc_test.R > /home/hkings/DATA/2_26.2_30/redo_noPCsF508/F508del_noPCs_chr_$f" --variant_id SNPS_bi_GATK_VQSR_MAF0.05_miss0.05.rds --sample_id keep_samples_noTwins.rds --chromosome "$f" --null_model /home/hkings/DATA/2_26.2_30/redo_noPCsF508/F508del_noPCs_nullmod.rds < assoc_test.R > /home/hkings/DATA/2_26.2_30/redo_noPCsF508/F508del_assoc_test_noPCs.log &

sleep 30
done

### sh /home/hkings/DATA/2_26.2_30/redo_noPCsF508/F508del_assoc_test_noPCs.sh

#For some reason this excluded chr13 and 19, so re-run those
R -q --vanilla --args CFF_sid_onlyGT.gds annot.rds --out_prefix /home/hkings/DATA/2_26.2_30/redo_noPCsF508/F508del_noPCs_chr_13 --variant_id SNPS_bi_GATK_VQSR_MAF0.05_miss0.05.rds --sample_id keep_samples_noTwins.rds --chromosome 13 --null_model /home/hkings/DATA/2_26.2_30/redo_noPCsF508/F508del_noPCs_nullmod.rds < assoc_test.R > /home/hkings/DATA/2_26.2_30/redo_noPCsF508/F508del_assoc_test_noPCs.log &

R -q --vanilla --args CFF_sid_onlyGT.gds annot.rds --out_prefix /home/hkings/DATA/2_26.2_30/redo_noPCsF508/F508del_noPCs_chr_19 --variant_id SNPS_bi_GATK_VQSR_MAF0.05_miss0.05.rds --sample_id keep_samples_noTwins.rds --chromosome 19 --null_model /home/hkings/DATA/2_26.2_30/redo_noPCsF508/F508del_noPCs_nullmod.rds < assoc_test.R > /home/hkings/DATA/2_26.2_30/redo_noPCsF508/F508del_assoc_test_noPCs.log &


### Combine assoc files:
Rscript combine_chr_assoc_files.R /home/hkings/DATA/2_26.2_30/redo_noPCsF508/F508del_noPCs &

### plot assoc results
R -q --vanilla --args /home/hkings/DATA/2_26.2_30/redo_noPCsF508/F508del_noPCsassoc.rds --out_prefix /home/hkings/DATA/2_26.2_30/redo_noPCsF508/F508del_noPCs --qq_ylim 10 --Man_ylim 6 < assoc_plots.R &





# 7/6
## Running in Topmed pipeline
cd /home/hkings/DATA/Topmed/

.libPaths("/labdata12/CF_WGS2/amstilp/analysis_pipeline_cff_wgs/R_library/")
library(TopmedPipeline)
library(GENESIS)
library(Biobase)
library(tidyverse)

#Saved 6_26 files As RData files in Topmed folder
key <- readr::read_tsv("/labdata12/CF_WGS2/cff_gwas/tables/key_cffwgs.tsv")

annot <- readRDS("/home/hkings/DATA/6_26.6_30/annot.rds")
#Drop sample.id column (want to fill this with VCF_id and PC columns because Topmed pipeline gets these from the PC-Air output)
pData(annot) <- subset(pData(annot), select = -c(sample.id, PC1, PC2, PC3, PC4, PC5, PC6, PC7, PC8))
pData(annot)$sample.id <- pData(annot)$vcf_id
save(annot, file = "Topmed_annot.RData")

keep_samples <- readRDS("/home/hkings/DATA/keep_samples.rds")
keep_samples2 <- key[key$sid %in% keep_samples, "vcf_id", drop=TRUE]
save(keep_samples2, file = "Topmed_keep_samples.RData")

if (!file.exists("Topmed_pca.RData")) {
  pcs <- readRDS("/home/hkings/DATA/6_26.6_30/6_26pcair.rds")
  # Map ids to match the VCF ids. Note this is only mapping the vectors element, but I think that's ok...
  j <- match(rownames(pcs$vectors), key$sid)
  stopifnot(all.equal(rownames(pcs$vectors), key$sid[j]q))
  rownames(pcs$vectors) <- key$vcf_id[j]
  save(pcs, file = "Topmed_pca.RData")
}


if (!file.exists("Topmed_pcr_mat.RData")) {
  grm <- readRDS("/home/hkings/DATA/6_26.6_30/6_26pcrelate.rds")
  # Map grm_mat ids to match the VCF ids.
  grm_mat <- pcrelateToMatrix(grm, thresh = NULL)
  stopifnot(all.equal(rownames(grm_mat), colnames(grm_mat)))
  j <- match(rownames(grm_mat), key$sid)
  stopifnot(all.equal(rownames(grm_mat), key$sid[j]))
  rownames(grm_mat) <- key$vcf_id[j]
  colnames(grm_mat) <- key$vcf_id[j]
  save(grm_mat, file = "Topmed_grm.RData")
}


vars <- readRDS("SNPS_bi_GATK_VQSR_MAF0.05_miss0.05.rds")
save(vars, file = "Topmed/Topmed_keep_vars.RData")


## Generate config file in R with inputs for null model
nullmod_config <- c(
  "out_prefix" = "Topmed_F508del",
  "phenotype_file" = "Topmed_annot.RData",
  "sample_include_file" = "Topmed_keep_samples.RData",
  "relatedness_matrix_file" = "Topmed_grm.RData",
  "pca_file" = "Topmed_pca.RData",
  "outcome" = "F508_hom",
  "binary" = "TRUE",
  # space separated list of covariates, excluding PCs.
  "covars" = "site",
  "n_pcs" = "4"
)
nullmod_config

writeConfig(nullmod_config, "/home/hkings/DATA/Topmed/Topmed_null_model.config")


## Association test setup
assoc_config <- c(
  "out_prefix" = "TopMed_F508del",
  "gds_file" = "CFF_5134_onlyGT.gds",
  # These two files are created by the null model code.
  "null_model_file" = "Topmed_F508del_null_model.RData",
  "phenotype_file" = "Topmed_F508del_phenotypes.RData",
  "variant_include_file" = "Topmed_keep_vars.RData",
  "pass_only" = FALSE,
  "genome_build" = "hg38"
)
assoc_config

writeConfig(assoc_config, "/home/hkings/DATA/Topmed/Topmed_assoc_single.config")

## Submit jobs to Cruncher
cd /home/hkings/DATA/Topmed/

#Null model
/labdata12/CF_WGS2/amstilp/analysis_pipeline_cff_wgs/null_model.py --cluster_file /labdata12/CF_WGS2/amstilp/analysis_pipeline_cff_wgs/cluster_cfg.json /home/hkings/DATA/Topmed/Topmed_null_model.config


#Exit node 
## Association testing
/labdata12/CF_WGS2/amstilp/analysis_pipeline_cff_wgs/assoc.py single --cluster_file /labdata12/CF_WGS2/amstilp/analysis_pipeline_cff_wgs/cluster_cfg.json -c 21-22 /home/hkings/DATA/Topmed/Topmed_assoc_single.config



#OR, to run from /labdata12/CF_WGS2/temp_Hanley_null_mod:
cd /labdata12/CF_WGS2/temp_Hanley_null_mod/

## Generate config file in R with inputs for null model
nullmod_config <- c(
  "out_prefix" = "/labdata12/CF_WGS2/temp_Hanley_null_mod/Topmed_F508del",
  "phenotype_file" = "/labdata12/CF_WGS2/temp_Hanley_null_mod/Topmed_annot.RData",
  "sample_include_file" = "/labdata12/CF_WGS2/temp_Hanley_null_mod/Topmed_keep_samples.RData",
  "relatedness_matrix_file" = "/labdata12/CF_WGS2/temp_Hanley_null_mod/Topmed_grm.RData",
  "pca_file" = "/labdata12/CF_WGS2/temp_Hanley_null_mod/Topmed_pca.RData",
  "outcome" = "F508_carrier",
  "binary" = "TRUE",
  # space separated list of covariates, excluding PCs.
  "covars" = "site",
  "n_pcs" = "4"
)
nullmod_config

writeConfig(nullmod_config, "/labdata12/CF_WGS2/temp_Hanley_null_mod/Topmed_null_model.config")


## Association test setup
assoc_config <- c(
  "out_prefix" = "/labdata12/CF_WGS2/temp_Hanley_null_mod/TopMed_F508del",
  "gds_file" = "/labdata12/CF_WGS2/temp_Hanley_null_mod/CFF_5134_onlyGT.gds",
  # These two files are created by the null model code.
  "null_model_file" = "/labdata12/CF_WGS2/temp_Hanley_null_mod/Topmed_F508del_null_model.RData",
  "phenotype_file" = "/labdata12/CF_WGS2/temp_Hanley_null_mod/Topmed_F508del_phenotypes.RData",
  "variant_include_file" = "/labdata12/CF_WGS2/temp_Hanley_null_mod/Topmed_keep_vars.RData",
  "pass_only" = FALSE,
  "genome_build" = "hg38"
)
assoc_config


writeConfig(assoc_config, "/labdata12/CF_WGS2/temp_Hanley_null_mod/Topmed_assoc_single.config")


/labdata12/CF_WGS2/amstilp/analysis_pipeline_cff_wgs/null_model.py --cluster_file /labdata12/CF_WGS2/amstilp/analysis_pipeline_cff_wgs/cluster_cfg.json /labdata12/CF_WGS2/temp_Hanley_null_mod/Topmed_null_model.config

/labdata12/CF_WGS2/amstilp/analysis_pipeline_cff_wgs/assoc.py single --cluster_file /labdata12/CF_WGS2/amstilp/analysis_pipeline_cff_wgs/cluster_cfg.json -c 21-22 /labdata12/CF_WGS2/temp_Hanley_null_mod/Topmed_assoc_single.config




# 7/7
## Get PC-correlation plots to work
calculate_snp_pc_corr.sh contains:
#$ -S /bin/sh
#$ -N plot_snp_pc_corr
#$ -cwd
#$ -j y

module load conda

R -q --no-save --args --infile-prefix /home/hkings/DATA/6_26.6_30/snp_corr_ --outfile /home/hkings/DATA/6_26.6_30/snp_corr.png --npcs 6 < plot_snp_pc_corr.R

#Run with: qsub -q new.q -v R_LIBS=/home/amstilp/devel/analysis_pipeline_cff_wgs/R_library /home/hkings/DATA/6_26.6_30/plot_snp_pc_corr.sh


#Not working. Will try running in R
#Note: must be in directory with correlation files

library(argparser)
library(dplyr)
library(tidyr)
library(ggplot2)

infile_prefix <- "/home/hkings/DATA/6_26.6_30/snp_corr"
outfile <- "/home/hkings/DATA/6_26.6_30/snp_corr.png"
n_pcs <- 6

infile_pattern <- sprintf("%s_chr\\d+?.rds", basename(infile_prefix))
infile_pattern
#[1] "snp_corr__chr\\d+?.rds"

files <- list.files(dirname(infile_prefix), pattern = infile_pattern)

corr_list <- lapply(files, function(x) readRDS(x))


# Put in chr/pos order.
corr <- bind_rows(corr_list) %>%
  mutate(chromosome = ordered(chromosome, levels = 1:22)) %>%
  arrange(chromosome, position)

# Add variant filtering.

# Reshape data to long format for plotting.
dat <- corr %>%
  pivot_longer(cols = starts_with("PC"), names_to = "PC", values_to = "corr") %>%
  mutate(
    abs_corr = abs(corr)
  ) %>%
  arrange(chromosome, position) %>%
  mutate(xpos = 1:n()) %>%
  filter(!is.na(corr))


# Thin points - up to 10,000 points from evenly spaced bins.
dat_thinned <- dat %>%
  group_by(PC) %>%
  mutate(bin = ntile(corr, 10)) %>%
  ungroup() %>%
  group_by(PC, bin) %>%
  sample_n(min(n(), 10000))

chrs <- sort(unique(dat_thinned$chromosome))
cmap <- setNames(rep(c("grey20", "grey50"), length.out = length(chrs)), chrs)
chr_labels <- dat_thinned %>% group_by(chromosome) %>% summarise(xpos = mean(xpos))

p <-
  ggplot(dat_thinned, aes( x = xpos, y = abs_corr)) +
  geom_point(aes(color = chromosome), size = 0.2) +
  scale_color_manual(values = cmap, breaks = names(cmap)) +
  facet_grid(rows = vars(PC)) +
  theme_bw() +
  ylim(c(0, 1)) +
  theme(
    legend.position = "none",
    panel.grid = element_blank()
    #panel.grid.minor = element_blank()
  ) +
  # Chromosome labels at midpoint of the chromosome.
  scale_x_continuous(label = chr_labels$chromosome, breaks = chr_labels$xpos) +
  xlab("Chromosome") +
  ylab("abs(r)")


ggsave(outfile, plot = p)
#This worked except for some reason it only saved 3 PCs even though it siad it was saving 7


cd /home/hkings/DATA/6_26.6_30

#plot_snp_pc_corr.sh now contains
R -q --no-save --args --infile-prefix /home/hkings/DATA/6_26.6_30/snp_corr --outfile /home/hkings/DATA/6_26.6_30/snp_corr.png --npcs 6 < /home/hkings/DATA/plot_snp_pc_corr.R
#Error: Problem with `mutate()` input `chromosome`.
#âœ– object 'chromosome' not found


#Shouldn't incldue full file path to infile-prefix
R -q --no-save --args --infile-prefix snp_corr --outfile snp_corr.png --npcs 6 < /home/hkings/DATA/plot_snp_pc_corr.R
#Error: corr_list <- lapply(files, function(x) readRDS(x))
Error in readRDS(x) : unknown input format



library(argparser)
library(dplyr)
library(tidyr)
library(ggplot2)

infile_prefix <- "snp_corr"
outfile <- "/home/hkings/DATA/6_26.6_30/snp_corr.png"
n_pcs <- 6

infile_pattern <- sprintf("%s_chr\\d+?.rds", basename(infile_prefix))
infile_pattern
#[1] "snp_corr__chr\\d+?.rds"

files <- list.files(dirname(infile_prefix), pattern = infile_pattern)

corr_list <- lapply(files, function(x) readRDS(x))

corr <- bind_rows(corr_list) %>%
  mutate(chromosome = ordered(chromosome, levels = c(1:22, "X"))) %>%
  arrange(chromosome, position)
#This works! Why doesn't it work in my script?



# 7/7
Set up seperate folders for full association tests using the topmed pipeline
Generation of config files is in a readme in each subfolder




# 7/10
## Troubleshoothing PC-correlation tests

#The problem is with:   mutate(chromosome = ordered(chromosome, levels = c(1:22, "X"))) %>%
#mutate is in the dplyr packade
#I have verified that the PC correlation script loads the same libraries as I am using in R, where this does work. Check version of dlpyr:
sessionInfo()
#R version 3.6.1 (2019-07-05) #check what version of R is running in Cruncher
#other attached packages:
#[1] ggplot2_3.3.2   tidyr_1.1.0     dplyr_1.0.0     argparser_0.6.1

#From script
print(sessionInfo())
#R version 3.6.1 (2019-07-05)
#other attached packages:
#[1] ggplot2_3.3.2   tidyr_1.1.0     dplyr_1.0.0     argparser_0.6.1

#This is the same. I'm out of ideas... will have to jsut run this in R


# 7/13-
## Rerun associartion testing without segregating by chromosome
#Run from /home/hkings/DATA/6_26.6_30/ on node 18
R -q --vanilla --args /home/hkings/DATA/CFF_sid_onlyGT.gds annot.rds 6_26pcr_mat.rds F508_count poisson --out_file one_run_7_23_assoc.rds --covars "PC1 PC2 PC3 PC4 site" --variant_id /home/hkings/DATA/SNPS_bi_GATK_VQSR_MAF0.05_miss0.05.rds --sample_id /home/hkings/DATA/keep_samples.rds < /home/hkings/DATA/association_test.R > one_run_7_23_assoc_test.log &


R -q --vanilla --args one_run_7_23_assoc.rds --out_prefix one_run_7_13_F508 --qq_ylim 10 --Man_ylim 6 < /home/hkings/DATA/assoc_plots.R &

#I got a lambda of 0.48 (which matches what I got using parallelization)... It seems like everything is decreased by half :( !!!


#Error in asMethod(object) : not a positive definite matrix
#Calls: fitNullModel ... .computeSigmaQuantities -> chol -> chol -> .local -> as -> asMethod
#Execution halted

#This was from using the wrong outcome. I fixed above


## Try running in R

library(SeqArray)
library(SeqVarTools)
library(Biobase)
library(GENESIS)
sessionInfo()

gds <- seqOpen("/home/hkings/DATA/CFF_sid_onlyGT.gds")
pheno <- readRDS("annot.rds")

variant_id <- readRDS("/home/hkings/DATA/SNPS_bi_GATK_VQSR_MAF0.05_miss0.05.rds")

sample_id <- readRDS("/home/hkings/DATA/keep_samples.rds")

covars <- c("PC1", "PC2", "PC3", "PC4", "site")

gds.id <- seqGetData(gds, "sample.id")
seqData <- SeqVarData(gds, sampleData = pheno)
seqSetFilter(gds, variant.id = variant_id, sample.id = sample_id)
iterator <- SeqVarBlockIterator(seqData, verbose=TRUE)

grm <- readRDS("6_26pcr_mat.rds")
nullmod <- fitNullModel(pheno, outcome = "F508_count", covars = covars,
                        cov.mat = grm, family = "gaussian", verbose=FALSE,
                        sample.id = sample_id)
#Error in asMethod(object) : not a positive definite matrix

nrow(grm)
#[1] 4966
nrow(pData(pheno))
#[1] 5134
length(seqGetData(gds, "sample.id"))
#[1] 4966

#Try removing grm matrix
nullmod <- fitNullModel(pheno, outcome = "F508_count", covars = covars,
                        family = "gaussian", verbose=FALSE,
                        sample.id = sample_id)
 #This works
 
 nullmod <- fitNullModel(pheno, outcome = "F508_count", covars = covars,
                        cov.mat = grm, family = "poisson", verbose=FALSE,
                        sample.id = sample_id)

message("Null model fixed effects:")
message(nullmod$fixef)


assoc <- assocTestSingle(iterator, nullmod)
saveRDS(assoc, argv$out_file)
seqClose(gds)



# 7/19
## Check which PCs are correlated with chr7
chr7 <- readRDS("/home/hkings/DATA/6_26.6_30/snp_corr_chr7.rds")
colnames(chr7) <- c("variant.id", "chromosome", "position", "PC1", "PC2", "PC3", "PC4", "PC5", "PC6")

#From dbSNP: F508del = rs113993960
#chr7:117559591-117559594


#Look at 10 bp on either side of F508del
chr7[chr7$position > 117559581 & chr7$position < 117559604,]

#        variant.id chromosome  position         PC1          PC2          PC3
#4847470   54413957          7 117559586 0.009482818 -0.010815004 -0.005325868
#4847471   54413958          7 117559588 0.001785449 -0.008038704 -0.003921802
#4847472   54413959          7 117559590 0.193141764  0.076486192  0.211967259
#4847473   54413960          7 117559594 0.007650481  0.006598179  0.009616552
#4847474   54413961          7 117559601 0.004660073  0.004650214  0.007844143
#                 PC4           PC5         PC6
#4847470 -0.011617509  1.564818e-02 -0.01973384
#4847471 -0.011353335  1.633033e-02 -0.02043901
#4847472 -0.031192602  4.078805e-02 -0.03525805
#4847473 -0.007339455  4.311553e-03  0.00292458
#4847474 -0.017247009 -4.066192e-05  0.01279516

PCs 1 and 3 appear to have some correlation with the CFTR F508del region

### Look at entiure CFTR gene: 117,480,025 to 117,668,665
CFTR <- chr7[chr7$position > 117480025 & chr7$position < 117668665, ]
CFTR[,4:9] <- abs(CFTR[,4:9])

CFTR_max <- abs(CFTR)
CFTR_max <- sapply(CFTR_max, max, na.rm = TRUE)
CFTR_max
#      PC1       PC2       PC3       PC4       PC5       PC6
#0.5108710 0.2807433 0.4594791 0.2141001 0.2920012 0.4948701

for(i in 1:6){
number <-sum(chr7[4:9][i] > CFTR_max[i], na.rm = TRUE)
print(number)
percent <- 100*sum(chr7[4:9][i] > CFTR_max[i], na.rm = TRUE)/nrow(na.omit(chr7[4:9][i]))
print(percent)
}

#This is the number and percent of variants greater than the highest peak in CFTR
#[1] 478
#[1] 0.008038718
#[1] 369
#[1] 0.006205621
#[1] 64
#[1] 0.001076314
#[1] 1861
#[1] 0.03129718
#[1] 1329
#[1] 0.02235033
#[1] 126
#[1] 0.002118993



#I can't figure out how to get the positions associated with these maxima





# 7/20
##Re-generate correlation plots with CFTR region highlighted - can't figure out how to do
.libPaths("/labdata12/CF_WGS2/amstilp/analysis_pipeline_cff_wgs/R_library/")

library(argparser)
library(dplyr)
library(tidyr)
library(ggplot2)

infile_prefix <- "/home/hkings/DATA/6_26.6_30/snp_corr"
outfile <- "/home/hkings/DATA/6_26.6_30/snp_corr.png"
n_pcs <- 6

infile_pattern <- sprintf("%s_chr\\d+?.rds", basename(infile_prefix))
infile_pattern
#[1] "snp_corr__chr\\d+?.rds"

files <- list.files(dirname(infile_prefix), pattern = infile_pattern)

corr_list <- lapply(files, function(x) readRDS(x))


# Put in chr/pos order.
corr <- bind_rows(corr_list) %>%
  mutate(chromosome = ordered(chromosome, levels = 1:22)) %>%
  arrange(chromosome, position)

# Add variant filtering.

# Reshape data to long format for plotting.
dat <- corr %>%
  pivot_longer(cols = starts_with("PC"), names_to = "PC", values_to = "corr") %>%
  mutate(
    abs_corr = abs(corr)
  ) %>%
  arrange(chromosome, position) %>%
  mutate(xpos = 1:n()) %>%
  filter(!is.na(corr))


# Thin points - up to 10,000 points from evenly spaced bins.
dat_thinned <- dat %>%
  group_by(PC) %>%
  mutate(bin = ntile(corr, 10)) %>%
  ungroup() %>%
  group_by(PC, bin) %>%
  sample_n(min(n(), 10000))

chrs <- sort(unique(dat_thinned$chromosome))
cmap <- setNames(rep(c("grey20", "grey50"), length.out = length(chrs)), chrs)
chr_labels <- dat_thinned %>% group_by(chromosome) %>% summarise(xpos = mean(xpos))


dat_thinned$CFTR <- ifelse(dat_thinned$chromosome == "7" & dat_thinned$position > 117480025 & dat_thinned$position < 117668665, "CFTR", "notCFTR")

p <-
  ggplot(dat_thinned, aes( x = xpos, y = abs_corr)) +
  geom_point(aes(color = CFTR), size = 0.2) +
  scale_color_manual(values = cmap, breaks = names(cmap)) +
  facet_grid(rows = vars(PC)) +
  theme_bw() +
  ylim(c(0, 1)) +
  theme(
    legend.position = "none",
    panel.grid = element_blank()
    #panel.grid.minor = element_blank()
  ) +
  # Chromosome labels at midpoint of the chromosome.
  scale_x_continuous(label = chr_labels$chromosome, breaks = chr_labels$xpos) +
  xlab("Chromosome") +
  ylab("abs(r)")


ggsave("CFTR_SNP_corr.png", plot = p)





# 7/20
## Look for APOE in CFTR varaints
library(SeqArray)
gds <- seqOpen("/home/hkings/DATA/CFF_5134_onlyGT.gds")
vars <- seqGetData(gds, "variant.id")
chrom <- seqGetData(gds, "chromosome")
pos <- seqGetData(gds, "position")

var.df <- data.frame(var.id = vars, chrom = chrom, pos = pos)
str(var.df)
#'data.frame':   120139844 obs. of  3 variables:
# $ var.id: int  1 2 3 4 5 6 7 8 9 10 ...
# $ chrom : Factor w/ 23 levels "1","10","11",..: 1 1 1 1 1 1 1 1 1 1 ...
# $ pos   : int  10109 10114 10116 10117 10119 10122 10128 10137 10138 10140 ...


#From https://www.snpedia.com/index.php/APOE
#rs429358	rs7412	Name
#C	        T	    ε1
#T	        T	    ε2
#T	        C	    ε3
#C	        C	    ε4

#rs429358: Position: chr19:44908684 (GRCh38.p12) (from https://www.ncbi.nlm.nih.gov/snp/rs429358)
#rs7412: Position: chr19:44908822 (GRCh38.p12) (from https://www.ncbi.nlm.nih.gov/snp/rs7412#clinical_significance)

allele1 <- var.df[var.df$chrom == "19" & var.df$pos == 44908684, "var.id"]
allele2 <- var.df[var.df$chrom == "19" & var.df$pos == 44908822, "var.id"]

seqSetFilter(gds, variant.id = c(allele1, allele2))
# of selected variants: 2

APOE_genotypes <- getGenotypeAlleles(gds)

APOE_genotypes <- [APOE_genotypes$
str(APOE_genotypes)
# chr [1:5134, 1:2] "T/T" "T/T" "T/T" "T/T" "T/T" "T/T" "T/C" "T/T" "T/C" ...
# - attr(*, "dimnames")=List of 2
#  ..$ sample : chr [1:5134] "JHU_BL_01_1" "JHU_BL_02_1" "JHU_BL_03_1" "JHU_BL_04_1" ...
#  ..$ variant: chr [1:2] "108506823" "108506828"

E <- ifelse(APOE_genotypes[,1] == "C/C" & APOE_genotypes[,2] == "C", "E4", ifelse()

#To look at entire APOE gene:

#APOE genomic coordinates: 19:44,905,795-44,909,394 (from NCBI)
APOE_vars <- var.df[var.df$chrom == "19" & var.df$pos > 44905795 & var.df$pos < 44909394, "var.id"]
str(APOE_vars)
# int [1:137] 108506722 108506723 108506724 108506725 108506726 108506727 108506728 108506729 108506730 108506731 ...

seqSetFilter(gds, variant.id = APOE_vars)
# of selected variants: 137




# 7/21
## Find if past hits are replicated
### From UNC/NCSU: hits in SaKnorm (see Liz email 7/21)
#locus	rsid	hg38	alleles	  AS_pval	slide_pval 
#MUC4/MUC20	rs3103933	3:195758569	A>C,G,T	  2.12E-05	  1e-05 to 1e-06
#SLC9A3	rs57221529	5:586509	A>G	3.47E-04	  just below 1e-05  
#HLA-DRA/HLA Class II	rs116003090/rs9391781	6:32467073	G>A,C,T	4.85E-06	  probably obscured by PNPLA1, near 1e-05
#EHF/APIP	rs10742326	11:34788463	G>A	3.20E-04	  1e-04 to 1e-05?
#AGTR2/SLC6A14	rs5952223	X:116255308 	C>T	8.56E-05	1.00E-08


### Are these hits included in QC'd variants?
library(SeqArray)
library(SeqVarTools)

gds <- seqOpen("/labdata12/CF_WGS2/draft_shared/variants/CFF_5134_onlyGT.gds")
SNPs <- readr::read_tsv("/labdata12/CF_WGS2/draft_shared/variants/snp_filtered_bi.tsv")

gds_vars <- variantInfo(gds)
head(gds_vars)
#  variant.id chr   pos    ref    alt
#1          1   1 10109 AACCCT      A
#2          2   1 10114     TA CA,T,*
#...

SNPs[SNPs$chrom == 3 & SNPs$pos == 195758569, "variant.id"]
#1   27697517
SNPs[SNPs$chrom == 5 & SNPs$pos == 586509, "variant.id"]
#1   35611591
SNPs[SNPs$chrom == 6 & SNPs$pos == 32467073, "variant.id"]
#1   44130699
SNPs[SNPs$chrom == 11 & SNPs$pos == 34788463, "variant.id"]
#1   74576948
#Did not include X chromosome... will run again with X
SNPs[SNPs$chrom == "X" & SNPs$pos == 116255308, "variant.id"]

gds_vars[gds_vars$variant.id == 27697517,]
#         variant.id chr       pos ref alt
#27697517   27697517   3 195758569   A   G
gds_vars[gds_vars$variant.id == 35611591,]
#         variant.id chr    pos ref alt
#35611591   35611591   5 586509   A   G
gds_vars[gds_vars$variant.id == 44130699,]
#         variant.id chr      pos ref alt
#44130699   44130699   6 32467073   G   C
gds_vars[gds_vars$variant.id == 74576948,]
#         variant.id chr      pos ref alt
#74576948   74576948  11 34788463   G   A

#Because snp_filtered_bi.tsv does not filter by missingngess or MAF, need to test that seperately for these variants
seqSetFilter(gds, variant.id = c(27697517, 35611591, 44130699, 74576948))
## of selected variants: 4

miss <- missingGenotypeRate(gds)
miss
#[1] 0.0000000000 0.0001947799 0.0000000000 0.0001947799
afreq <- alleleFrequency(gds) 
maf <- pmin(afreq, 1-afreq)
maf
#[1] 0.2943124 0.2128385 0.3304441 0.4180791



## Where do these hits fall in my Knorma results?
load("/labdata12/CF_WGS2/shared/analyses/hkings/knorma_assoc/knorma_6PCs/data/Topmed_Knorma_6PCs_assoc_single_chr1.RData")
assoc_full <- assoc

for(i in 2:22){
load(paste0("/labdata12/CF_WGS2/shared/analyses/hkings/knorma_assoc/knorma_6PCs/data/Topmed_Knorma_6PCs_assoc_single_", "chr", i, ".RData"))
assoc_full <- rbind(assoc_full, assoc)
}

nrow(assoc_full)
#[1] 5490867


subset(assoc_full, variant.id == 27697517 | variant.id == 35611591 | variant.id == 44130699 | variant.id == 74576948)[,c("variant.id", "chr", "pos", "Score.pval")]
#        variant.id  chr       pos   Score.pval  AS_pval     slide_pval          rsid UNC_NCSU           nearbye_hit_from_Paul(pos)  rsid_Knorma_PC_air_from_Paul    P_value_from_Paul
#1259670   27697517   3 195758569 1.111614e-04  2.12E-05	1e-05 to 1e-06      rs3103933               195758569                   rs3103933                       8.82e-6 
#1667063   35611591   5    586509 9.010374e-04  3.47E-04	just below 1e-05    rs57221529                                                       
#2104632   44130699   6  32467073 3.482529e-06  4.85E-06	near 1e-05          rs116003090/rs9391781   32467073                    rs9391781                       4.85e-05
#3619975   74576948  11  34788463 6.134021e-04  3.20E-04	1e-04 to 1e-05?     rs10742326              34829636                    rs2915186                       9.15e-05
#Note: AS_pval and slide_pval came from Liz's estimates from Corvol et al. (2015) PMC4589222 (I added them in after


### Find hits in Paul's table near hits from Corvol
#Make UNC_NCSU into a table of position ranges
UNC_NCSU_hits <- subset(assoc_full, variant.id == 27697517 | variant.id == 35611591 | variant.id == 44130699 | variant.id == 74576948)[,c("variant.id", "chr", "pos", "Score.pval")]

UNC_NCSU_hits$start_pos <- UNC_NCSU_hits$pos - 1000000
UNC_NCSU_hits$end_pos <- UNC_NCSU_hits$pos + 1000000

#Read table from Paul in as SNP table
Paul_top_SNPs <- read.table("/labdata12/CF_WGS2/shared/external/paul_knorma/knorma_pcair_top.txt", header = TRUE)

SNPs_in_range <- function(SNP_table, ranges_table){
  matches <- list()
  j=1
  for(position in SNP_table$pos){
	   for(i in 1:nrow(ranges_table)){
		     if(ranges_table$start_pos[i] <= position & ranges_table$end_pos[i] >= position & SNP_table$chr[j] == ranges_table$chr[i]){
               if(SNP_table[SNP_table$chr == ranges_table$chr[i] & SNP_table$pos == position
               print(SNP_table[SNP_table$chr == ranges_table$chr[i] & SNP_table$pos == position,c("chr", "pos", "Score.pval")])
		     }
	   }
     j = j + 1
   }
}
#This isn't working... need to figure out how to make dataframes in for-loops


SNPs_in_range(Paul_top_SNPs, UNC_NCSU_hits)




# 7/23
Troubleshooting getting F508 gaussian model to run
#Problem is with GRM
#Try convering all neg to 0 wit hkin_to_matrix threshold

library(SeqArray)
library(SeqVarTools)
library(GENESIS)

mypcrel <- readRDS("/home/hkings/DATA/6_26.6_30/6_26pcrelate.rds")
pcr_mat <- pcrelateToMatrix(mypcrel, thresh = 2^-11/2, scaleKin = 2)

#Blah! Internet crashed and work didn't save. Here's waht I've tried (note: this is the normal error): "Error in asMethod(object) : not a positive definite matrix"
#With and without inverse residuals - doesn't make a difference, will do without until this is resolved
#changing start argument in R (couldn't get it to work in pipeline) - I think it should be 4967 (number of samples in GRM + 1) but tried 3, 5000, 4966... results in a different error: matrix not symnetrical
#Without GRM - this works
#Without site, without sex, and without sex and site
#restricted to JHU samples (& sex as covariate)




# 7/26
#Re-run analysis with William's LD-pruned list (first compair against mine)
#Check participants file matches his:
participants <- read.delim("participants_cffwgs.tsv", sep = "\t", header = TRUE)
summary(participants$knorma)
#-1.9200  0.0000  0.6600  0.6187  1.2300  3.0000     584
#This matches the master file... good, but will use the participants file from share/tables to be safe


#Regenerate annot file with participants file from shared/tables folder
#edited generate_sample_filter_and_phenotype_df to reflect this...

pruned_HK <- readRDS("/home/hkings/DATA/pruned_snps.rds")
pruned_WG <- readRDS("/labdata12/CF_WGS2/shared/variants/CFF_5034_onlyGT_filtered_bi_pruned.rds")
length(pruned_HK)
#[1] 171909
#[1] 127109
length(pruned_WG)
#[1] 177718

sum(pruned_HK %in% pruned_WG)
#[1] 127109

pre_LD <- readRDS("/home/hkings/DATA/pre_LD_SNP_filter.rds")
length(pre_LD)
#[1] 81569276

load("/labdata12/CF_WGS2/shared/analyses/hkings/data_for_pipeline/Topmed_keep_vars.RData") # as vars_HK
load("/labdata12/CF_WGS2/shared/analyses/wwgordon/data_for_pipeline/snp_filtered_bi.RData") #as vars_WG
length(vars_HK)
#[1] 5490867
length(vars_WG)
#[1] 87106997


# 7/28
## Redo assoc testing starting with William's pruned variant list
R -q --vanilla --args /labdata12/CF_WGS2/shared/variants/CFF_5134_onlyGT.gds --out_prefix /labdata12/CF_WGS2/shared/analyses/hkings/PCs_and_GRMs/7_28 --variant_id /labdata12/CF_WGS2/shared/variants/CFF_5034_onlyGT_filtered_bi_pruned.rds --sample_id /labdata12/CF_WGS2/shared/analyses/hkings/keep_samples_allCF.rds --autosome_only FALSE < /home/hkings/DATA/king_grm.R > 7_28king_grm.log &

